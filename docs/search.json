[{"path":"https://urbaninstitute.github.io/nccsdata/articles/data_pull.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Legacy Data Downloads With nccsdata","text":"Theget_data() function nccsdata downloads NCCS legacy data sets hosted publicly accessible S3 buckets processes user. vignette, provide several examples function can used retrieve legacy data.","code":"library(nccsdata)"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/data_pull.html","id":"downloading-core-data","dir":"Articles","previous_headings":"","what":"Downloading Core Data","title":"Legacy Data Downloads With nccsdata","text":"can define type data, range data (years), organization type, form type using arguments dsname, time, scope.orgtype, scope.formtype respectively. function downloads NCCS core data year 2015 non-profits file full 990s 990EZs. possible argument values : CHARITIES: charities NONPROFIT: nonprofits PRIVFOUND: private foundations PC: Nonprofits file full IRS Form 990 EZ: Nonprofits file 990EZs PZ: Nonprofits file full Form 990s 990EZs PF: Private foundation filings data available years 1989 2019. get_data() also provides prompts size requested data downloads.","code":"core <- get_data(dsname = \"core\",                  time = \"2015\",                  scope.orgtype = \"NONPROFIT\",                  scope.formtype = \"PZ\")"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/data_pull.html","id":"filtering-data-using-ntee-codes","dir":"Articles","previous_headings":"","what":"Filtering data using NTEE codes","title":"Legacy Data Downloads With nccsdata","text":"can also pull subset data based NTEE classifications using various ntee associated arguments get_data(). code snippet, pull dataset select rows belonging nonprofits involved Arts, Culture Humanities. full description NTEE codes available . descriptions can also accessed using ntee_preview().","code":"core_art <- get_data(dsname = \"core\",                      time = \"2015\",                      scope.orgtype = \"NONPROFIT\",                      scope.formtype = \"PZ\",                      ntee = c(\"ART\"))"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/data_pull.html","id":"filtering-data-by-geography","dir":"Articles","previous_headings":"","what":"Filtering Data By Geography","title":"Legacy Data Downloads With nccsdata","text":"can subset data geographic units geo arguments get_data(). code returns rows belonging Nonprofits New York City, NY. Additional arguments geo arguments can used subset data county (geo.county) region (geo.region). geo arguments must used conjunction one another: geo.state = “”, geo.county = “Allen” “Allen, ” geo.state = “CA”, geo.city = “San Francisco” “San Francisco, CA” get_data() layers filters subset data desired geographic unit. Using 1 argument return geographic units fall within (e.g. geo.region = “south” returns rows southern states geo.city = “Lebanon” returns rows belonging cities name ‘Lebanon’).","code":"core_NYC <- get_data(dsname = \"core\",                      time = \"2015\",                      scope.orgtype = \"NONPROFIT\",                      scope.formtype = \"PZ\",                      geo.state = \"NY\",                      geo.city = \"New York City\")"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/data_pull.html","id":"appending-bmf-data-to-core-data","dir":"Articles","previous_headings":"","what":"Appending BMF Data to Core Data","title":"Legacy Data Downloads With nccsdata","text":"get_data() automatically appends NTEE metadata requested data set. Appending metadata IRS Business Master File (BMF) requires downloading additional download 185 MB can toggled /append_bmf. BMF metadata now appended downloaded Core data set.","code":"corebmf <- get_data(dsname = \"core\",                     time = \"2015\",                     scope.orgtype = \"NONPROFIT\",                     scope.formtype = \"PZ\",                     append.bmf = TRUE)"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/data_pull.html","id":"downloading-bmf-data","dir":"Articles","previous_headings":"","what":"Downloading BMF Data","title":"Legacy Data Downloads With nccsdata","text":"geo ntee arguments mentioned can also used download filter BMF data.","code":"bmf <- get_data(dsname = \"bmf\",                 ntee = c(\"ART\"),                 geo.state = c(\"CA\"))"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/geo.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Geographic filtering with nccsdata","text":"vignette walks process retrieving geographic metadata used filtering legacy NCCS files. legacy data consists several relevant geographic variables: STATE: 2 letter state abbreviation (caps) CITY: Name city associated address provided ADDRESS (caps) FIPS: County FIPS Codes. Federal Information Processing System (FIPS) codes used US Census (5 digit integer) last variable FIPS can used match observations based Census units. preserves external validity geographic units operationalizing according U.S. Census delineations. US Census data,FIPS also tied Core Based Statistical Areas (CBSAs) consist mutually exclusive Metropolitan, (metros populations 50,000) Micropolitan Statistical Areas (populations 10,000 50,000). details examples provided Census Crosswalks page Urban NCCS Site. Thus, geographic filtering US Census units requires crosswalking units across multiple levels, county CBSA. vignette, first explore CBSA FIPS codes geo_preview() function demonstrating CBSA FIPS can linked county FIPS codes via map_countyfips().","code":"library(nccsdata)"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/geo.html","id":"exploring-cbsa-fips-codes","dir":"Articles","previous_headings":"","what":"Exploring CBSA FIPS codes","title":"Geographic filtering with nccsdata","text":"geo_preview() function allows users preview retrieve CBSA FIPS codes /associated metadata specific state. following code snippet, geo_preview() returns names CBSAs associated FIPS codes. within argument takes desired state, abbreviated form, input geo argument returns specified columns. code chunk, function returns names CBSAs associated FIPS codes. within takes desired state input geo returns specified columns. geo can also used return county metadata.","code":"geo_preview( geo=c(\"cbsa\",\"cbsafips\"), within=\"FL\", type=\"metro\" ) #>  #>  #> |                                        cbsa| cbsafips| #> |-------------------------------------------:|--------:| #> |                             Gainesville, FL|    23540| #> |                            Jacksonville, FL|    27260| #> |           Panama City-Panama City Beach, FL|    37460| #> |           Palm Bay-Melbourne-Titusville, FL|    37340| #> |   Miami-Fort Lauderdale-West Palm Beach, FL|    33100| #> |                             Punta Gorda, FL|    39460| #> |                       Homosassa Springs, FL|    26140| #> |                     Naples-Marco Island, FL|    34940| #> |              Pensacola-Ferry Pass-Brent, FL|    37860| #> |      Deltona-Daytona Beach-Ormond Beach, FL|    19660| #> |                             Tallahassee, FL|    45220| #> |         Tampa-St. Petersburg-Clearwater, FL|    45300| #> |                                 Sebring, FL|    42700| #> | Sebastian-Vero Beach-West Vero Corridor, FL|    42680| #> |               Orlando-Kissimmee-Sanford, FL|    36740| #> |                   Cape Coral-Fort Myers, FL|    15980| #> |           North Port-Bradenton-Sarasota, FL|    35840| #> |                                   Ocala, FL|    36100| #> |                          Port St. Lucie, FL|    38940| #> |      Crestview-Fort Walton Beach-Destin, FL|    18880| #> |                   Lakeland-Winter Haven, FL|    29460| #> |                   Wildwood-The Villages, FL|    48680| geo_preview(geo = c(\"cbsa\", \"county\", \"cbsafips\"), within = \"FL\", type = \"metro\") #>  #>  #> |                                        cbsa|                           county| cbsafips| #> |-------------------------------------------:|--------------------------------:|--------:| #> |                             Gainesville, FL|      Alachua County, FL, Central|    23540| #> |                            Jacksonville, FL|       Baker County, FL, Outlying|    27260| #> |           Panama City-Panama City Beach, FL|          Bay County, FL, Central|    37460| #> |           Palm Bay-Melbourne-Titusville, FL|      Brevard County, FL, Central|    37340| #> |   Miami-Fort Lauderdale-West Palm Beach, FL|      Broward County, FL, Central|    33100| #> |                             Punta Gorda, FL|    Charlotte County, FL, Central|    39460| #> |                       Homosassa Springs, FL|       Citrus County, FL, Central|    26140| #> |                            Jacksonville, FL|         Clay County, FL, Central|    27260| #> |                     Naples-Marco Island, FL|      Collier County, FL, Central|    34940| #> |                            Jacksonville, FL|        Duval County, FL, Central|    27260| #> |              Pensacola-Ferry Pass-Brent, FL|     Escambia County, FL, Central|    37860| #> |      Deltona-Daytona Beach-Ormond Beach, FL|      Flagler County, FL, Central|    19660| #> |                             Tallahassee, FL|     Gadsden County, FL, Outlying|    45220| #> |                             Gainesville, FL|   Gilchrist County, FL, Outlying|    23540| #> |         Tampa-St. Petersburg-Clearwater, FL|    Hernando County, FL, Outlying|    45300| #> |                                 Sebring, FL|    Highlands County, FL, Central|    42700| #> |         Tampa-St. Petersburg-Clearwater, FL| Hillsborough County, FL, Central|    45300| #> | Sebastian-Vero Beach-West Vero Corridor, FL| Indian River County, FL, Central|    42680| #> |                             Tallahassee, FL|   Jefferson County, FL, Outlying|    45220| #> |               Orlando-Kissimmee-Sanford, FL|        Lake County, FL, Outlying|    36740| #> |                   Cape Coral-Fort Myers, FL|          Lee County, FL, Central|    15980| #> |                             Tallahassee, FL|         Leon County, FL, Central|    45220| #> |                             Gainesville, FL|        Levy County, FL, Outlying|    23540| #> |           North Port-Bradenton-Sarasota, FL|      Manatee County, FL, Central|    35840| #> |                                   Ocala, FL|       Marion County, FL, Central|    36100| #> |                          Port St. Lucie, FL|       Martin County, FL, Central|    38940| #> |   Miami-Fort Lauderdale-West Palm Beach, FL|   Miami-Dade County, FL, Central|    33100| #> |                            Jacksonville, FL|      Nassau County, FL, Outlying|    27260| #> |      Crestview-Fort Walton Beach-Destin, FL|     Okaloosa County, FL, Central|    18880| #> |               Orlando-Kissimmee-Sanford, FL|       Orange County, FL, Central|    36740| #> |               Orlando-Kissimmee-Sanford, FL|     Osceola County, FL, Outlying|    36740| #> |   Miami-Fort Lauderdale-West Palm Beach, FL|   Palm Beach County, FL, Central|    33100| #> |         Tampa-St. Petersburg-Clearwater, FL|        Pasco County, FL, Central|    45300| #> |         Tampa-St. Petersburg-Clearwater, FL|     Pinellas County, FL, Central|    45300| #> |                   Lakeland-Winter Haven, FL|         Polk County, FL, Central|    29460| #> |                            Jacksonville, FL|    St. Johns County, FL, Central|    27260| #> |                          Port St. Lucie, FL|    St. Lucie County, FL, Central|    38940| #> |              Pensacola-Ferry Pass-Brent, FL|   Santa Rosa County, FL, Central|    37860| #> |           North Port-Bradenton-Sarasota, FL|     Sarasota County, FL, Central|    35840| #> |               Orlando-Kissimmee-Sanford, FL|     Seminole County, FL, Central|    36740| #> |                   Wildwood-The Villages, FL|       Sumter County, FL, Central|    48680| #> |      Deltona-Daytona Beach-Ormond Beach, FL|      Volusia County, FL, Central|    19660| #> |                             Tallahassee, FL|     Wakulla County, FL, Outlying|    45220| #> |      Crestview-Fort Walton Beach-Destin, FL|       Walton County, FL, Central|    18880| #> |           Panama City-Panama City Beach, FL|  Washington County, FL, Outlying|    37460|"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/geo.html","id":"metropolitan-and-micropolitan-data","dir":"Articles","previous_headings":"","what":"Metropolitan and Micropolitan Data","title":"Geographic filtering with nccsdata","text":"Since CBSAs include combination metropolitan micropolitan statistical areas, geo_preview() allows user select either unit using type argument. code snippet returns CBSA names FIPS codes metropolitan statistical areas Wyoming. Setting type micro returns data micropolitan statistical areas.","code":"geo_preview(geo = c(\"cbsa\",\"cbsafips\"), within = \"WY\", type = \"micro\") #>  #>  #> |             cbsa| cbsafips| #> |----------------:|--------:| #> |      Laramie, WY|    29660| #> |     Gillette, WY|    23940| #> |     Riverton, WY|    40180| #> |         Cody, WY|    17650| #> |     Sheridan, WY|    43260| #> | Rock Springs, WY|    40540| #> |   Jackson, WY-ID|    27220| #> |  Evanston, WY-UT|    21740| geo_preview(geo = c(\"cbsa\",\"cbsafips\"), within = \"WY\", type = \"metro\") #>  #>  #> |         cbsa| cbsafips| #> |------------:|--------:| #> | Cheyenne, WY|    16940| #> |   Casper, WY|    16220|"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/geo.html","id":"exploring-csa-fips","dir":"Articles","previous_headings":"","what":"Exploring CSA FIPS","title":"Geographic filtering with nccsdata","text":"addition CBSAs, geo_preview() can also retrieve metadata Combined Statistical Areas (CSAs). CSAs (populations form coherent commercial commuting zone) created identifying adjacent micropolitant metropolitan statistical areas constitute coherent economic region. code snippet returns CSA names FIPS codes metropolitan statistical areas Virginia. Since CSAs combination various Micropolitan Metropolitan areas, CBSAs fall CSA, hence CSA FIPS available existing CSAs.","code":"geo_preview(geo = c(\"cbsa\", \"cbsafips\", \"csa\",\"csafips\"),              within = \"VA\",              type = \"metro\") #>  #>  #> |                                         cbsa| cbsafips|                                            csa| csafips| #> |--------------------------------------------:|--------:|----------------------------------------------:|-------:| #> |                          Charlottesville, VA|    16820|                                               |      NA| #> |                                 Richmond, VA|    40060|                                               |      NA| #> |                                Lynchburg, VA|    31340|                                               |      NA| #> | Washington-Arlington-Alexandria, DC-VA-MD-WV|    47900| Washington-Baltimore-Arlington, DC-MD-VA-WV-PA|     548| #> |                   Staunton-Stuarts Draft, VA|    44420|        Harrisonburg-Staunton-Stuarts Draft, VA|     277| #> |                                  Roanoke, VA|    40220|                                               |      NA| #> |        Blacksburg-Christiansburg-Radford, VA|    13980|                                               |      NA| #> |                            Winchester, VA-WV|    49020| Washington-Baltimore-Arlington, DC-MD-VA-WV-PA|     548| #> |     Virginia Beach-Chesapeake-Norfolk, VA-NC|    47260|               Virginia Beach-Chesapeake, VA-NC|     545| #> |                             Harrisonburg, VA|    25500|        Harrisonburg-Staunton-Stuarts Draft, VA|     277| #> |                     Kingsport-Bristol, TN-VA|    28700|          Johnson City-Kingsport-Bristol, TN-VA|     304|"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/geo.html","id":"filtering-legacy-data-with-county-fips-codes","dir":"Articles","previous_headings":"","what":"Filtering Legacy Data with County FIPS codes","title":"Geographic filtering with nccsdata","text":"retrieving desired CBSA/CSA FIPS codes, map_countyfips() can used match county FIPS codes present legacy data, retrieved get_data(). Downloaded data can filtered using county FIPS codes shown .","code":"# Retrive CBSA FIPS from NY cbsa_ny <- geo_preview(geo = c(\"cbsa\", \"cbsafips\"),                         within = \"NY\") #>  #>  #> |                                  cbsa| cbsafips| #> |-------------------------------------:|--------:| #> |           Albany-Schenectady-Troy, NY|    10580| #> |    New York-Newark-Jersey City, NY-NJ|    35620| #> |                        Binghamton, NY|    13780| #> |                             Olean, NY|    36460| #> |                            Auburn, NY|    12180| #> |                 Jamestown-Dunkirk, NY|    27460| #> |                            Elmira, NY|    21300| #> |                       Plattsburgh, NY|    38460| #> |                            Hudson, NY|    26460| #> |                          Cortland, NY|    18660| #> | Kiryas Joel-Poughkeepsie-Newburgh, NY|    28880| #> |               Buffalo-Cheektowaga, NY|    15380| #> |                      Gloversville, NY|    24100| #> |                           Batavia, NY|    12860| #> |                        Utica-Rome, NY|    46540| #> |               Watertown-Fort Drum, NY|    48060| #> |                         Rochester, NY|    40380| #> |                          Syracuse, NY|    45060| #> |                         Amsterdam, NY|    11220| #> |                           Oneonta, NY|    36580| #> |                Massena-Ogdensburg, NY|    32390| #> |                      Seneca Falls, NY|    42900| #> |                           Corning, NY|    18500| #> |                        Monticello, NY|    33910| #> |                            Ithaca, NY|    27060| #> |                          Kingston, NY|    28740| #> |                       Glens Falls, NY|    24020|  # Map these to county FIPS codes ny_countyfips <- map_countyfips(geo.cbsafips = cbsa_ny$cbsafips)  # Pull core data for the year 2015 core_2015 <- get_data(dsname = \"core\",                       time = \"2015\",                       scope.orgtype = \"NONPROFIT\",                       scope.formtype = \"PZ\") #> Valid inputs detected. Retrieving data. #> Downloading core data #> Requested files have a total size of 115 MB. Proceed #>                       with download? Enter Y/N (Yes/no/cancel) #> Core data downloaded  # Filter with NY county FIPS core_2015_nyfips <- core_2015 %>%    dplyr::filter(FIPS %in% ny_countyfips)"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/ntee.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Parsing NTEE Codes With nccsdata","text":"vignette demonstrates nccsdata package can used explore query NTEE codes help ntee_preview() parse_ntee().","code":"library(nccsdata)"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/ntee.html","id":"retrieving-ntee-code-descriptions","dir":"Articles","previous_headings":"","what":"Retrieving NTEE Code Descriptions","title":"Parsing NTEE Codes With nccsdata","text":"NTEE2 code system new code system builds original National Taxonomy Exempt Entities (NTEE) code system used IRS NCCS classify nonprofit organizations. comprehensive overview NTEE codes available link. new NTEE system can split 5 levels.  grouped 3 components: Level 1: Industry Group Level 2-4: Industry, Division Subdivision Level 5: Organization Type 3 groups nested sequentially. NTEE2 code must contain 3 parts sequence. ntee_preview() provides descriptions full codes least 1 component included ntee argument. example shown : ntee_preview() prints descriptions NTEE codes belonging “UNI” (University) Industry Group. function outputs nested following order: Industry, Division Subdivision (Levels 2-4) ntee takes arguments belonging 3 components returns matching NTEE codes. can also preview specific NTEE codes ntee argument shown : ntee_preview() automatically structures output avoid repeating Industry Groups Organization Types. Industry, Division Subdivision (Level 2-4), ntee_preview() accepts placeholder arguments denoted letter x (case insensitive). example, ntee = B2x provide preview NTEE codes B Level 2 2 Level 3. allows user narrow search specific levels. Examples provided : familiar group, ntee_preview() offers following arguments: ntee.group: Industry Group (Level 1) ntee.code : Industry, Division Subdivision (Level 2 - 4) ntee.orgtype: Organization Type (Level 5) ntee.code, placeholder arguments supported well. combination ntee arguments, preview_ntee returns codes fit arguments. Thus, example NTEE codes UNI CXX printed .","code":"ntee_preview(ntee = \"UNI\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  UNI: University #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          B40:  #>  #>          Providing support to educational institutions that provide #>          opportunities for individuals to acquire a higher level of knowledge, #>          skills and specialization in their chosen area of interest in a formal #>          school setting. Use this code for higher education institutions not #>          specified below. #>  #>          B41:  #>  #>          Providing support to postsecondary educational institutions, known #>          alternatively as community colleges or junior colleges and commonly #>          organized into two-year programs, that offer instruction that has been #>          adapted in content, level and schedule to meet the needs of the #>          community in which they are located. Community or junior colleges award #>          an Associates in Arts (A.A.) certificate. #>  #>          B42:  #>  #>          Providing support to educational institutions that offer college level #>          courses of study that may lead to the customary bachelor of arts or #>          science degree. #>  #>          B43:  #>  #>          Providing support to postsecondary educational institutions that offer #>          postgraduate study at masters or doctorate levels in addition to an #>          undergraduate program for people who meet entry level requirements and #>          are interested in an advanced education. Some institutions of #>          university status are known as colleges or institutes. #>  #>          B50:  #>  #>          Providing support to separately incorporated postsecondary educational #>          institutions provide opportunities for people who have completed their #>          undergraduate education to receive advanced, postgraduate training in a #>          professional field leading to a masters degree or doctorate. #>  #>  End of Preview ntee_preview(ntee = c(\"UNI\", \"A25\")) #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  ART: Arts, Culture & Humanities #>  #>      PA: Professional Societies/Associations #>  #>          A25:  #>  #>          Providing support to organizations that provide informal arts #>          educational programming and/or instruction but do not grant diplomas or #>          degrees; or which offer services regarding the arts to educational #>          institutions or to public entities involved in education. #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          A25:  #>  #>          Providing support to organizations that provide informal arts #>          educational programming and/or instruction but do not grant diplomas or #>          degrees; or which offer services regarding the arts to educational #>          institutions or to public entities involved in education. #>  #>  UNI: University #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          B40:  #>  #>          Providing support to educational institutions that provide #>          opportunities for individuals to acquire a higher level of knowledge, #>          skills and specialization in their chosen area of interest in a formal #>          school setting. Use this code for higher education institutions not #>          specified below. #>  #>          B41:  #>  #>          Providing support to postsecondary educational institutions, known #>          alternatively as community colleges or junior colleges and commonly #>          organized into two-year programs, that offer instruction that has been #>          adapted in content, level and schedule to meet the needs of the #>          community in which they are located. Community or junior colleges award #>          an Associates in Arts (A.A.) certificate. #>  #>          B42:  #>  #>          Providing support to educational institutions that offer college level #>          courses of study that may lead to the customary bachelor of arts or #>          science degree. #>  #>          B43:  #>  #>          Providing support to postsecondary educational institutions that offer #>          postgraduate study at masters or doctorate levels in addition to an #>          undergraduate program for people who meet entry level requirements and #>          are interested in an advanced education. Some institutions of #>          university status are known as colleges or institutes. #>  #>          B50:  #>  #>          Providing support to separately incorporated postsecondary educational #>          institutions provide opportunities for people who have completed their #>          undergraduate education to receive advanced, postgraduate training in a #>          professional field leading to a masters degree or doctorate. #>  #>  End of Preview ntee_preview(ntee = c(\"ART-A61-AA\",                       \"ART-A54-MT\")) #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  ART: Arts, Culture & Humanities #>  #>      AA: Alliance/Advocacy Organizations #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>      MT: Management and Technical Assistance #>  #>          A54:  #>  #>          Providing support to organizations that acquire, preserve, research and #>          exhibit collections of objects including documents, tools, implements #>          and furnishings that have significance in helping to interpret or #>          understand the past. History museums may specialize in a specific era #>          such as early Greece or Rome, a particular geographical region such as #>          California or Appalachia, a particular ethnic or cultural group such as #>          Native Americans or a specific subject area such as costumes; and may #>          contain items created or used by contemporary or historical figures. #>  #>  End of Preview ntee_preview(ntee = \"Uxx\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  PSB: Public, Societal Benefit #>  #>      AA: Alliance/Advocacy Organizations #>  #>          U00:  #>  #>           #>  #>      MM: Monetary Support - Multiple Organizations #>  #>          U00:  #>  #>           #>  #>      MS: Monetary Support - Single Organization #>  #>          U00:  #>  #>           #>  #>      MT: Management and Technical Assistance #>  #>          U00:  #>  #>           #>  #>          U40:  #>  #>          Providing support to organizations that conduct research in the area of #>          science which applies mathematical and scientific principles to the #>          solution of practical problems for the benefit of society. #>  #>      NS: Nonmonetary Support Not Elsewhere Classified (N.E.C.) #>  #>          U00:  #>  #>           #>  #>          U21:  #>  #>          Providing support to organizations that support or conduct research in #>          the area of science that studies the oceans and associated phenomena #>          including the land/ water and water/atmospheric boundaries. #>  #>      PA: Professional Societies/Associations #>  #>          U00:  #>  #>           #>  #>          U20:  #>  #>          Providing support to organizations that focus broadly on scientific #>          research and inquiry or which engage in interdisciplinary science #>          activities. #>  #>          U30:  #>  #>          Providing support to organizations that conduct research in the #>          physical and earth sciences, i.e., the area of science that studies #>          inanimate objects, processes of matter and energy and associated #>          phenomena. Use this code for organizations that conduct research that #>          broadly covers the physical and earth sciences or for those that #>          address areas of scientific study not specified below. #>  #>          U33:  #>  #>          Providing support to organizations that conduct research in chemistry, #>          the science which addresses the composition and behavior of matter #>          including its micro- and macro-structure, the processes of chemical #>          change and the theoretical description and laboratory simulation of #>          these phenomena. #>  #>          U40:  #>  #>          Providing support to organizations that conduct research in the area of #>          science which applies mathematical and scientific principles to the #>          solution of practical problems for the benefit of society. #>  #>          U42:  #>  #>          Providing support to organizations that conduct research in the field #>          of engineering in which mathematical and scientific principles are #>          applied to solve a wide variety of practical problems in industry, #>          social organization, public works and commerce. #>  #>          U50:  #>  #>          Providing support to organizations that conduct research in the #>          sciences which analyze the structure, function, growth, origin, #>          evolution or distribution of living organisms and their relations to #>          their natural environments. #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          U20:  #>  #>          Providing support to organizations that focus broadly on scientific #>          research and inquiry or which engage in interdisciplinary science #>          activities. #>  #>          U21:  #>  #>          Providing support to organizations that support or conduct research in #>          the area of science that studies the oceans and associated phenomena #>          including the land/ water and water/atmospheric boundaries. #>  #>          U30:  #>  #>          Providing support to organizations that conduct research in the #>          physical and earth sciences, i.e., the area of science that studies #>          inanimate objects, processes of matter and energy and associated #>          phenomena. Use this code for organizations that conduct research that #>          broadly covers the physical and earth sciences or for those that #>          address areas of scientific study not specified below. #>  #>          U31:  #>  #>           #>  #>          U33:  #>  #>          Providing support to organizations that conduct research in chemistry, #>          the science which addresses the composition and behavior of matter #>          including its micro- and macro-structure, the processes of chemical #>          change and the theoretical description and laboratory simulation of #>          these phenomena. #>  #>          U34:  #>  #>           #>  #>          U36:  #>  #>           #>  #>          U40:  #>  #>          Providing support to organizations that conduct research in the area of #>          science which applies mathematical and scientific principles to the #>          solution of practical problems for the benefit of society. #>  #>          U41:  #>  #>           #>  #>          U42:  #>  #>          Providing support to organizations that conduct research in the field #>          of engineering in which mathematical and scientific principles are #>          applied to solve a wide variety of practical problems in industry, #>          social organization, public works and commerce. #>  #>          U50:  #>  #>          Providing support to organizations that conduct research in the #>          sciences which analyze the structure, function, growth, origin, #>          evolution or distribution of living organisms and their relations to #>          their natural environments. #>  #>          U99:  #>  #>           #>  #>      RP: Research Institutes and/or Public Policy Analysis #>  #>          U00:  #>  #>           #>  #>          U40:  #>  #>          Providing support to organizations that conduct research in the area of #>          science which applies mathematical and scientific principles to the #>          solution of practical problems for the benefit of society. #>  #>          U50:  #>  #>          Providing support to organizations that conduct research in the #>          sciences which analyze the structure, function, growth, origin, #>          evolution or distribution of living organisms and their relations to #>          their natural environments. #>  #>  End of Preview ntee_preview(ntee = \"H3x\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  HEL: Health, Non-Hospital #>  #>      MM: Monetary Support - Multiple Organizations #>  #>          H30:  #>  #>          Providing support to organizations that conduct research which can be #>          used to improve the prevention, diagnosis and treatment of cancer. Use #>          this code for organizations whose research focuses on a wide variety of #>          forms of cancer. #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          H30:  #>  #>          Providing support to organizations that conduct research which can be #>          used to improve the prevention, diagnosis and treatment of cancer. Use #>          this code for organizations whose research focuses on a wide variety of #>          forms of cancer. #>  #>          H32:  #>  #>           #>  #>  End of Preview ntee_preview(ntee = \"B2x\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  EDU: Education, Non-University #>  #>      AA: Alliance/Advocacy Organizations #>  #>          B20:  #>  #>          Providing support to preschool, elementary and secondary schools that #>          provide a formal education for children and adolescents in kindergarten #>          or first grade through grade twelve. #>  #>          B21:  #>  #>          Providing support to separately organized preschools or nursery schools #>          and/or kindergartens which provide foundation-level learning for #>          children (usually age two through five and four and one half or five #>          respectively) prior to entering the formal school setting. #>  #>          B29:  #>  #>          Providing support to schools run independently of the traditional #>          public school system but receiving public funding and operating by a #>          charter.  This performance contract details the schools mission, #>          program, goals, students served, method of assessment, and ways to #>          measure success. #>  #>      MM: Monetary Support - Multiple Organizations #>  #>          B20:  #>  #>          Providing support to preschool, elementary and secondary schools that #>          provide a formal education for children and adolescents in kindergarten #>          or first grade through grade twelve. #>  #>      MS: Monetary Support - Single Organization #>  #>          B20:  #>  #>          Providing support to preschool, elementary and secondary schools that #>          provide a formal education for children and adolescents in kindergarten #>          or first grade through grade twelve. #>  #>          B25:  #>  #>          Providing support to schools comprising any span of grades beginning #>          with the next grade following an elementary school and ending at or #>          below grade 12. Includes junior high schools or intermediate schools #>          and high schools which provide formal instruction for students who want #>          to prepare further education at the college level or for employment #>          following graduation. #>  #>          B29:  #>  #>          Providing support to schools run independently of the traditional #>          public school system but receiving public funding and operating by a #>          charter.  This performance contract details the schools mission, #>          program, goals, students served, method of assessment, and ways to #>          measure success. #>  #>      MT: Management and Technical Assistance #>  #>          B20:  #>  #>          Providing support to preschool, elementary and secondary schools that #>          provide a formal education for children and adolescents in kindergarten #>          or first grade through grade twelve. #>  #>      NS: Nonmonetary Support Not Elsewhere Classified (N.E.C.) #>  #>          B20:  #>  #>          Providing support to preschool, elementary and secondary schools that #>          provide a formal education for children and adolescents in kindergarten #>          or first grade through grade twelve. #>  #>          B21:  #>  #>          Providing support to separately organized preschools or nursery schools #>          and/or kindergartens which provide foundation-level learning for #>          children (usually age two through five and four and one half or five #>          respectively) prior to entering the formal school setting. #>  #>          B25:  #>  #>          Providing support to schools comprising any span of grades beginning #>          with the next grade following an elementary school and ending at or #>          below grade 12. Includes junior high schools or intermediate schools #>          and high schools which provide formal instruction for students who want #>          to prepare further education at the college level or for employment #>          following graduation. #>  #>      PA: Professional Societies/Associations #>  #>          B20:  #>  #>          Providing support to preschool, elementary and secondary schools that #>          provide a formal education for children and adolescents in kindergarten #>          or first grade through grade twelve. #>  #>          B25:  #>  #>          Providing support to schools comprising any span of grades beginning #>          with the next grade following an elementary school and ending at or #>          below grade 12. Includes junior high schools or intermediate schools #>          and high schools which provide formal instruction for students who want #>          to prepare further education at the college level or for employment #>          following graduation. #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          B20:  #>  #>          Providing support to preschool, elementary and secondary schools that #>          provide a formal education for children and adolescents in kindergarten #>          or first grade through grade twelve. #>  #>          B21:  #>  #>          Providing support to separately organized preschools or nursery schools #>          and/or kindergartens which provide foundation-level learning for #>          children (usually age two through five and four and one half or five #>          respectively) prior to entering the formal school setting. #>  #>          B24:  #>  #>           #>  #>          B25:  #>  #>          Providing support to schools comprising any span of grades beginning #>          with the next grade following an elementary school and ending at or #>          below grade 12. Includes junior high schools or intermediate schools #>          and high schools which provide formal instruction for students who want #>          to prepare further education at the college level or for employment #>          following graduation. #>  #>          B28:  #>  #>           #>  #>          B29:  #>  #>          Providing support to schools run independently of the traditional #>          public school system but receiving public funding and operating by a #>          charter.  This performance contract details the schools mission, #>          program, goals, students served, method of assessment, and ways to #>          measure success. #>  #>  End of Preview ntee2_codes <- ntee_preview(ntee.group = \"UNI\",                             ntee.code = \"Cxx\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  ENV: Environment and Animals #>  #>      AA: Alliance/Advocacy Organizations #>  #>          C00:  #>  #>           #>  #>          C20:  #>  #>          Providing support to organizations which seek to ensure that #>          communities have a clean and healthful environment that is free from #>          air and water pollution, pesticides and other hazardous substances, #>          damaging radiation and excessive levels of noise. #>  #>          C30:  #>  #>          Providing support to organizations that protect our natural resources #>          from abuse, neglect, waste or exploitation and preserve their #>          availability for future generations. #>  #>          C32:  #>  #>          Providing support to organizations that preserve and protect water #>          resources from indiscriminate waste and ensure that the supply of #>          quality water is adequate to meet the needs of the public, agriculture #>          and industry. Also included are organizations that preserve and manage #>          coastal lands including shorelines, coastal waters and lands extending #>          inland from the shore which affect coastal waters; bays, lakes, rivers, #>          wetlands, estuaries, watersheds and other aquatic habitats. #>  #>          C35:  #>  #>          Providing support to organizations that conserve existing energy #>          resources, ensure efficient use of available energy and develop new #>          energy resources while protecting the quality of the environment. #>  #>          C50:  #>  #>          Providing support to organizations that enhance the aesthetic #>          characteristics of the built environment by acquiring and preserving #>          open spaces for public enjoyment; planting trees, flowers and shrubs in #>          public places; conducting recycling and roadside cleanup campaigns; and #>          engaging in other environmental beautification activities. #>  #>          C60:  #>  #>          Providing support to organizations such as nature centers that provide #>          informal classes which acquaint participants with particular aspects of #>          their environment and increase their understanding of and appreciation #>          for ecological balance. #>  #>      MM: Monetary Support - Multiple Organizations #>  #>          C00:  #>  #>           #>  #>          C30:  #>  #>          Providing support to organizations that protect our natural resources #>          from abuse, neglect, waste or exploitation and preserve their #>          availability for future generations. #>  #>          C35:  #>  #>          Providing support to organizations that conserve existing energy #>          resources, ensure efficient use of available energy and develop new #>          energy resources while protecting the quality of the environment. #>  #>          C36:  #>  #>          Providing support to organizations involved with forest lands and the #>          protection of the nations forests from insects, disease, fire, erosion, #>          air pollution and other destructive forces. #>  #>      MS: Monetary Support - Single Organization #>  #>          C00:  #>  #>           #>  #>          C20:  #>  #>          Providing support to organizations which seek to ensure that #>          communities have a clean and healthful environment that is free from #>          air and water pollution, pesticides and other hazardous substances, #>          damaging radiation and excessive levels of noise. #>  #>          C30:  #>  #>          Providing support to organizations that protect our natural resources #>          from abuse, neglect, waste or exploitation and preserve their #>          availability for future generations. #>  #>          C32:  #>  #>          Providing support to organizations that preserve and protect water #>          resources from indiscriminate waste and ensure that the supply of #>          quality water is adequate to meet the needs of the public, agriculture #>          and industry. Also included are organizations that preserve and manage #>          coastal lands including shorelines, coastal waters and lands extending #>          inland from the shore which affect coastal waters; bays, lakes, rivers, #>          wetlands, estuaries, watersheds and other aquatic habitats. #>  #>          C40:  #>  #>          Providing support to organizations that are involved in the cultivation #>          of plant life for a variety of purposes. #>  #>          C42:  #>  #>          Providing support to organizations that provide organized opportunities #>          for individuals to pursue their interest in ornamental plants, flowers, #>          trees, shrubs, house plants, herbs, garden fruits and vegetables or #>          other species of plants. #>  #>          C50:  #>  #>          Providing support to organizations that enhance the aesthetic #>          characteristics of the built environment by acquiring and preserving #>          open spaces for public enjoyment; planting trees, flowers and shrubs in #>          public places; conducting recycling and roadside cleanup campaigns; and #>          engaging in other environmental beautification activities. #>  #>      MT: Management and Technical Assistance #>  #>          C00:  #>  #>           #>  #>          C20:  #>  #>          Providing support to organizations which seek to ensure that #>          communities have a clean and healthful environment that is free from #>          air and water pollution, pesticides and other hazardous substances, #>          damaging radiation and excessive levels of noise. #>  #>          C30:  #>  #>          Providing support to organizations that protect our natural resources #>          from abuse, neglect, waste or exploitation and preserve their #>          availability for future generations. #>  #>          C32:  #>  #>          Providing support to organizations that preserve and protect water #>          resources from indiscriminate waste and ensure that the supply of #>          quality water is adequate to meet the needs of the public, agriculture #>          and industry. Also included are organizations that preserve and manage #>          coastal lands including shorelines, coastal waters and lands extending #>          inland from the shore which affect coastal waters; bays, lakes, rivers, #>          wetlands, estuaries, watersheds and other aquatic habitats. #>  #>          C60:  #>  #>          Providing support to organizations such as nature centers that provide #>          informal classes which acquaint participants with particular aspects of #>          their environment and increase their understanding of and appreciation #>          for ecological balance. #>  #>      NS: Nonmonetary Support Not Elsewhere Classified (N.E.C.) #>  #>          C00:  #>  #>           #>  #>      PA: Professional Societies/Associations #>  #>          C00:  #>  #>           #>  #>          C20:  #>  #>          Providing support to organizations which seek to ensure that #>          communities have a clean and healthful environment that is free from #>          air and water pollution, pesticides and other hazardous substances, #>          damaging radiation and excessive levels of noise. #>  #>          C30:  #>  #>          Providing support to organizations that protect our natural resources #>          from abuse, neglect, waste or exploitation and preserve their #>          availability for future generations. #>  #>          C32:  #>  #>          Providing support to organizations that preserve and protect water #>          resources from indiscriminate waste and ensure that the supply of #>          quality water is adequate to meet the needs of the public, agriculture #>          and industry. Also included are organizations that preserve and manage #>          coastal lands including shorelines, coastal waters and lands extending #>          inland from the shore which affect coastal waters; bays, lakes, rivers, #>          wetlands, estuaries, watersheds and other aquatic habitats. #>  #>          C36:  #>  #>          Providing support to organizations involved with forest lands and the #>          protection of the nations forests from insects, disease, fire, erosion, #>          air pollution and other destructive forces. #>  #>          C40:  #>  #>          Providing support to organizations that are involved in the cultivation #>          of plant life for a variety of purposes. #>  #>          C60:  #>  #>          Providing support to organizations such as nature centers that provide #>          informal classes which acquaint participants with particular aspects of #>          their environment and increase their understanding of and appreciation #>          for ecological balance. #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          C20:  #>  #>          Providing support to organizations which seek to ensure that #>          communities have a clean and healthful environment that is free from #>          air and water pollution, pesticides and other hazardous substances, #>          damaging radiation and excessive levels of noise. #>  #>          C27:  #>  #>           #>  #>          C30:  #>  #>          Providing support to organizations that protect our natural resources #>          from abuse, neglect, waste or exploitation and preserve their #>          availability for future generations. #>  #>          C32:  #>  #>          Providing support to organizations that preserve and protect water #>          resources from indiscriminate waste and ensure that the supply of #>          quality water is adequate to meet the needs of the public, agriculture #>          and industry. Also included are organizations that preserve and manage #>          coastal lands including shorelines, coastal waters and lands extending #>          inland from the shore which affect coastal waters; bays, lakes, rivers, #>          wetlands, estuaries, watersheds and other aquatic habitats. #>  #>          C34:  #>  #>           #>  #>          C35:  #>  #>          Providing support to organizations that conserve existing energy #>          resources, ensure efficient use of available energy and develop new #>          energy resources while protecting the quality of the environment. #>  #>          C36:  #>  #>          Providing support to organizations involved with forest lands and the #>          protection of the nations forests from insects, disease, fire, erosion, #>          air pollution and other destructive forces. #>  #>          C40:  #>  #>          Providing support to organizations that are involved in the cultivation #>          of plant life for a variety of purposes. #>  #>          C41:  #>  #>           #>  #>          C42:  #>  #>          Providing support to organizations that provide organized opportunities #>          for individuals to pursue their interest in ornamental plants, flowers, #>          trees, shrubs, house plants, herbs, garden fruits and vegetables or #>          other species of plants. #>  #>          C50:  #>  #>          Providing support to organizations that enhance the aesthetic #>          characteristics of the built environment by acquiring and preserving #>          open spaces for public enjoyment; planting trees, flowers and shrubs in #>          public places; conducting recycling and roadside cleanup campaigns; and #>          engaging in other environmental beautification activities. #>  #>          C60:  #>  #>          Providing support to organizations such as nature centers that provide #>          informal classes which acquaint participants with particular aspects of #>          their environment and increase their understanding of and appreciation #>          for ecological balance. #>  #>          C99:  #>  #>           #>  #>      RP: Research Institutes and/or Public Policy Analysis #>  #>          C00:  #>  #>           #>  #>          C20:  #>  #>          Providing support to organizations which seek to ensure that #>          communities have a clean and healthful environment that is free from #>          air and water pollution, pesticides and other hazardous substances, #>          damaging radiation and excessive levels of noise. #>  #>          C30:  #>  #>          Providing support to organizations that protect our natural resources #>          from abuse, neglect, waste or exploitation and preserve their #>          availability for future generations. #>  #>          C35:  #>  #>          Providing support to organizations that conserve existing energy #>          resources, ensure efficient use of available energy and develop new #>          energy resources while protecting the quality of the environment. #>  #>  UNI: University #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          B40:  #>  #>          Providing support to educational institutions that provide #>          opportunities for individuals to acquire a higher level of knowledge, #>          skills and specialization in their chosen area of interest in a formal #>          school setting. Use this code for higher education institutions not #>          specified below. #>  #>          B41:  #>  #>          Providing support to postsecondary educational institutions, known #>          alternatively as community colleges or junior colleges and commonly #>          organized into two-year programs, that offer instruction that has been #>          adapted in content, level and schedule to meet the needs of the #>          community in which they are located. Community or junior colleges award #>          an Associates in Arts (A.A.) certificate. #>  #>          B42:  #>  #>          Providing support to educational institutions that offer college level #>          courses of study that may lead to the customary bachelor of arts or #>          science degree. #>  #>          B43:  #>  #>          Providing support to postsecondary educational institutions that offer #>          postgraduate study at masters or doctorate levels in addition to an #>          undergraduate program for people who meet entry level requirements and #>          are interested in an advanced education. Some institutions of #>          university status are known as colleges or institutes. #>  #>          B50:  #>  #>          Providing support to separately incorporated postsecondary educational #>          institutions provide opportunities for people who have completed their #>          undergraduate education to receive advanced, postgraduate training in a #>          professional field leading to a masters degree or doctorate. #>  #>  End of Preview"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/ntee.html","id":"retrieve-complete-ntee2-codes","dir":"Articles","previous_headings":"","what":"Retrieve Complete NTEE2 Codes","title":"Parsing NTEE Codes With nccsdata","text":"ntee_preview() also offers invisible return, allowing users save full NTEE2 codes previewed character vector. Simply assign output ntee_preview() variable name.","code":"print(ntee2_codes) #>  [1] \"UNI-B40-RG\" \"UNI-B41-RG\" \"UNI-B42-RG\" \"UNI-B43-RG\" \"UNI-B50-RG\" #>  [6] \"ENV-C00-AA\" \"ENV-C20-AA\" \"ENV-C30-AA\" \"ENV-C32-AA\" \"ENV-C35-AA\" #> [11] \"ENV-C50-AA\" \"ENV-C60-AA\" \"ENV-C00-MT\" \"ENV-C20-MT\" \"ENV-C30-MT\" #> [16] \"ENV-C32-MT\" \"ENV-C60-MT\" \"ENV-C00-PA\" \"ENV-C20-PA\" \"ENV-C30-PA\" #> [21] \"ENV-C32-PA\" \"ENV-C36-PA\" \"ENV-C40-PA\" \"ENV-C60-PA\" \"ENV-C00-RP\" #> [26] \"ENV-C20-RP\" \"ENV-C30-RP\" \"ENV-C35-RP\" \"ENV-C00-MS\" \"ENV-C20-MS\" #> [31] \"ENV-C30-MS\" \"ENV-C32-MS\" \"ENV-C40-MS\" \"ENV-C42-MS\" \"ENV-C50-MS\" #> [36] \"ENV-C00-MM\" \"ENV-C30-MM\" \"ENV-C35-MM\" \"ENV-C36-MM\" \"ENV-C00-NS\" #> [41] \"ENV-C20-RG\" \"ENV-C27-RG\" \"ENV-C30-RG\" \"ENV-C32-RG\" \"ENV-C34-RG\" #> [46] \"ENV-C35-RG\" \"ENV-C36-RG\" \"ENV-C40-RG\" \"ENV-C41-RG\" \"ENV-C42-RG\" #> [51] \"ENV-C50-RG\" \"ENV-C60-RG\" \"ENV-C99-RG\""},{"path":"https://urbaninstitute.github.io/nccsdata/articles/ntee.html","id":"alternative-methods-to-retrieve-complete-ntee2-codes","dir":"Articles","previous_headings":"","what":"Alternative Methods to Retrieve Complete NTEE2 Codes","title":"Parsing NTEE Codes With nccsdata","text":"second function, parse_ntee(), can also used extract complete NTEE codes. parse_ntee() accepts following arguments: ntee.group: Industry Group (Level 1) ntee.code : Industry, Division Subdivision (Level 2 - 4) ntee.orgtype: Organization Type (Level 5) Use include Levels specific argument. example, retrieve complete NTEE codes Universities: Similar ntee_preview(), parse_ntee() accepts placeholder arguments. However, parse_ntee() returns NTEE codes satisfy arguments. Since NTEE codes structure HEL-A2X-XXX, parse_ntee() return results. Including \"ART\" ntee.group returns valid NTEE codes.","code":"parse_ntee(ntee.group = c(\"UNI\"),            ntee.code = \"all\",            ntee.orgtype = \"all\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #> [1] \"UNI-B40-RG\" \"UNI-B41-RG\" \"UNI-B42-RG\" \"UNI-B43-RG\" \"UNI-B50-RG\" parse_ntee(ntee.group = \"all\",            ntee.code = \"A2x\",            ntee.orgtype = \"all\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  [1] \"ART-A26-MT\" \"ART-A20-PA\" \"ART-A25-PA\" \"ART-A20-MS\" \"ART-A26-MM\" #>  [6] \"ART-A20-NS\" \"ART-A20-RG\" \"ART-A23-RG\" \"ART-A24-RG\" \"ART-A25-RG\" #> [11] \"ART-A26-RG\" \"ART-A27-RG\" parse_ntee(ntee.group = \"HEL\",            ntee.code = \"A2x\",            ntee.orgtype = \"all\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #> character(0) parse_ntee(ntee.group = c(\"HEL\", \"ART\"),            ntee.code = \"A2x\",            ntee.orgtype = \"all\") #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  [1] \"ART-A26-MT\" \"ART-A20-PA\" \"ART-A25-PA\" \"ART-A20-MS\" \"ART-A26-MM\" #>  [6] \"ART-A20-NS\" \"ART-A20-RG\" \"ART-A23-RG\" \"ART-A24-RG\" \"ART-A25-RG\" #> [11] \"ART-A26-RG\" \"ART-A27-RG\""},{"path":"https://urbaninstitute.github.io/nccsdata/articles/summary_stats.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Summarising nccsdata","text":"preparing data get_data(), preview_sample() can used compute summary statistics print results tabular format different subgroups prepared data. vignette, provide examples preview_sample().","code":"library(nccsdata)"},{"path":"https://urbaninstitute.github.io/nccsdata/articles/summary_stats.html","id":"pulling-data-and-computing-summary-statistics","dir":"Articles","previous_headings":"","what":"Pulling Data and Computing Summary Statistics","title":"Summarising nccsdata","text":"preview_sample() groups data set user-defined group_by columns, computes summary statistics user-defined var column. available summary statistics : min: minimum value median: median value max: maximum value mean: mean value count: count rows belonging group","code":"core <- get_data(dsname = \"core\",                  time = \"2015\") #> Valid inputs detected. Retrieving data. #> Downloading core data #> Requested files have a total size of 115 MB. Proceed #>                       with download? Enter Y/N (Yes/no/cancel) #> Core data downloaded preview_sample(data = core,               group_by = c(\"NTEECC\", \"STATE\"),               var = c(\"TOTREV\"),               stats = c(\"count\", \"mean\", \"max\")) #> Valid summary fields entered. #> # A tibble: 13,091 × 5 #> # Groups:   NTEECC [937] #>    NTEECC STATE count    mean       max #>    <chr>  <chr> <int> <int64>   <int64> #>  1 \"\"     \"\"      406 1769225 375740413 #>  2 \"A01\"  \"AZ\"      2   41647     73295 #>  3 \"A01\"  \"CA\"     13 1052177   9241479 #>  4 \"A01\"  \"CO\"      2  268455    319830 #>  5 \"A01\"  \"CT\"      2  228350    415503 #>  6 \"A01\"  \"DC\"      5  446664   1117827 #>  7 \"A01\"  \"DE\"      1  268308    268308 #>  8 \"A01\"  \"FL\"      2 1181261   1713932 #>  9 \"A01\"  \"GA\"      3   64731    109254 #> 10 \"A01\"  \"HI\"      3   15371     29528 #> # ℹ 13,081 more rows"},{"path":"https://urbaninstitute.github.io/nccsdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2023). nccsdata: Package (Title Case). https://github.com/UrbanInstitute/nccsdata, https://urbaninstitute.github.io/nccsdata/.","code":"@Manual{,   title = {nccsdata: What the Package Does (Title Case)},   author = {Who wrote it},   year = {2023},   note = {https://github.com/UrbanInstitute/nccsdata, https://urbaninstitute.github.io/nccsdata/}, }"},{"path":[]},{"path":"https://urbaninstitute.github.io/nccsdata/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (Title Case)","text":"nccsdata provides tools read, filter append metadata publicly available NCCS Core BMF data sets.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (Title Case)","text":"can install development version nccsdata GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"UrbanInstitute/nccsdata\") library(nccsdata)"},{"path":[]},{"path":"https://urbaninstitute.github.io/nccsdata/index.html","id":"data-pulls","dir":"","previous_headings":"Usage","what":"Data Pulls","title":"What the Package Does (Title Case)","text":"nccsdata package can used download legacy core data 1989 2019 charities, nonprofits, private foundations file respective required IRS forms Form 990, 990EZs, . data can filtered based NTEE codes geography. Full get_data() vignette","code":"core_2005_nonprofit_pz <- nccsdata::get_data(dsname = \"core\",                                              time = \"2005\",                                              scope.orgtype = \"NONPROFIT\",                                              scope.formtype = \"PZ\") #> Requested files have a total size of 82.6 MB. Proceed #>                       with download? Enter Y/N (Yes/no/cancel)   tibble::as_tibble(core_2005_nonprofit_pz) #> # A tibble: 157,211 × 150 #>    NTEECC new.code   type.org broad.category major.group univ  hosp  two.digit #>    <chr>  <chr>      <chr>    <chr>          <chr>       <lgl> <lgl> <chr>     #>  1 J40    RG-HMS-J40 RG       HMS            J           FALSE FALSE 40        #>  2 W30    RG-PSB-W30 RG       PSB            W           FALSE FALSE 30        #>  3 W30    RG-PSB-W30 RG       PSB            W           FALSE FALSE 30        #>  4 W30    RG-PSB-W30 RG       PSB            W           FALSE FALSE 30        #>  5 W30    RG-PSB-W30 RG       PSB            W           FALSE FALSE 30        #>  6 Y42    RG-MMB-Y42 RG       MMB            Y           FALSE FALSE 42        #>  7 S41    RG-PSB-S41 RG       PSB            S           FALSE FALSE 41        #>  8 N60    RG-HMS-N60 RG       HMS            N           FALSE FALSE 60        #>  9 S41    RG-PSB-S41 RG       PSB            S           FALSE FALSE 41        #> 10 S41    RG-PSB-S41 RG       PSB            S           FALSE FALSE 41        #> # ℹ 157,201 more rows #> # ℹ 142 more variables: further.category <int>, division.subdivision <chr>, #> #   broad.category.description <chr>, major.group.description <chr>, #> #   code.name <chr>, division.subdivision.description <chr>, keywords <chr>, #> #   further.category.desciption <chr>, ntee2.code <chr>, EIN <chr>, #> #   TAXPER <int>, STYEAR <int>, CONT <int>, DUES <int>, SECUR <int64>, #> #   SALESEXP <int64>, INVINC <int>, SOLICIT <int>, GOODS <int>, GRPROF <int>, … core_2005_artnonprofits_newyork <- nccsdata::get_data(dsname = \"core\",                                                       time = \"2016\",                                                       scope.orgtype = \"NONPROFIT\",                                                       scope.formtype = \"PZ\",                                                       ntee = \"ART\",                                                       geo.state = \"NY\") #> Requested files have a total size of 113.6 MB. Proceed #>                       with download? Enter Y/N (Yes/no/cancel) tibble::as_tibble(core_2005_artnonprofits_newyork) #> # A tibble: 346 × 168 #>    NTEECC new.code   type.org broad.category major.group univ  hosp  two.digit #>    <chr>  <chr>      <chr>    <chr>          <chr>       <lgl> <lgl> <chr>     #>  1 A01    AA-ART-A00 AA       ART            A           FALSE FALSE 1         #>  2 A01    AA-ART-A00 AA       ART            A           FALSE FALSE 1         #>  3 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #>  4 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #>  5 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #>  6 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #>  7 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #>  8 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #>  9 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #> 10 A03    PA-ART-A00 PA       ART            A           FALSE FALSE 3         #> # ℹ 336 more rows #> # ℹ 160 more variables: further.category <int>, division.subdivision <chr>, #> #   broad.category.description <chr>, major.group.description <chr>, #> #   code.name <chr>, division.subdivision.description <chr>, keywords <chr>, #> #   further.category.desciption <chr>, ntee2.code <chr>, EIN <int>, #> #   ACCPER <int>, ACTIV1 <dbl>, ACTIV2 <dbl>, ACTIV3 <dbl>, ADDRESS <chr>, #> #   AFCD <dbl>, ASS_BOY <dbl>, ASS_EOY <dbl>, BOND_BOY <dbl>, BOND_EOY <dbl>, …"},{"path":"https://urbaninstitute.github.io/nccsdata/index.html","id":"summarising-data","dir":"","previous_headings":"Usage","what":"Summarising Data","title":"What the Package Does (Title Case)","text":"processing desired data, nccsdata can also used generate summary tables. Full preview_sample() vignette.","code":"nccsdata::preview_sample(data = core_2005_artnonprofits_newyork,                          group_by = c(\"NTEECC\", \"STATE\"),                          var = c(\"TOTREV\"),                          stats = c(\"count\", \"mean\", \"max\")) #> # A tibble: 29 × 5 #> # Groups:   NTEECC [29] #>    NTEECC STATE count    mean     max #>    <chr>  <chr> <int> <int64> <int64> #>  1 A01    NY        2   77734  151889 #>  2 A03    NY       14  924422 9222403 #>  3 A11    NY        2  762752 1485739 #>  4 A19    NY        1   50300   50300 #>  5 A20    NY        5  236863  711793 #>  6 A23    NY      112   64597  758835 #>  7 A30    NY       26  810942 4974965 #>  8 A31    NY        3 1389737 2142396 #>  9 A32    NY        7  759395 3154923 #> 10 A33    NY       15  329638  828684 #> # ℹ 19 more rows"},{"path":"https://urbaninstitute.github.io/nccsdata/index.html","id":"ntee-codes","dir":"","previous_headings":"Usage","what":"NTEE Codes","title":"What the Package Does (Title Case)","text":"nccsdata also offers several supplementary functions documenting retrieving NTEE codes. Full ntee_preview() parse_ntee() vignette.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"What the Package Does (Title Case)","text":"Raise issue issues page contact Thiyaghessan tpoongundranar@urban.org.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 nccsdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/core_file_constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"function to construct filenames from aws s3 core bucket — core_file_constructor","title":"function to construct filenames from aws s3 core bucket — core_file_constructor","text":"function constructs names .csv files found nccsdata bucket nccs core files based user inputs","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/core_file_constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to construct filenames from aws s3 core bucket — core_file_constructor","text":"","code":"core_file_constructor(time, scope.orgtype, scope.formtype)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/core_file_constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to construct filenames from aws s3 core bucket — core_file_constructor","text":"time character vector. Dates core/bmf files query. Valid inputs range 1989-2022. Default value \"current\" 2022. scope.orgtype character scalar. Organization type query core/bmf s3 bucket. Valid inputs 'CHARITIES' charities (501C3-PC), 'PRIVFOUND' private foundations (501C3-PF) 'NONPROFIT' nonprofits (501CE) scope.formtype character scalar. Form type query core/bmf s3 bucket. Valid inputs 'PC'(nonprofits file full version), 'EZ'(nonprofits file 990EZs ), ' PZ'(nonprofits file PC EZ), 'PF'(private foundations).","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/core_file_constructor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to construct filenames from aws s3 core bucket — core_file_constructor","text":"character vector. Vector .csv filenames query s3 bucket.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dat_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to filter data table — dat_filter","title":"Function to filter data table — dat_filter","text":"dat_filter() takes arguments specified user (name dataset, column names subsets), checks filters apply specified dataset returns FIPs codes meet subsetting conditions. user specifies whether pulling data Block Tract datasets specifies subset data want e.g. (geo.state.abbr = c(\"NY\")). function returns either Tract Block IDs fit subset specified","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dat_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to filter data table — dat_filter","text":"","code":"dat_filter(dat,                   args,                   ex_args,                   id_col,                   census.level)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dat_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to filter data table — dat_filter","text":"dat data table. Data table either census block data. args string expression. User arguments specified parse_geo() ex_args string expression. Processed user arguments specified parse_geo() id_col string. Name column Tract Block IDs census.level name data.table (Block/Census) error messages.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dat_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to filter data table — dat_filter","text":"list fips codes based filter criteria.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dic_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that creates a dictionary from 2 data.frame columns — dic_from_df","title":"Function that creates a dictionary from 2 data.frame columns — dic_from_df","text":"function takes one data.frame column key column another value.column. returns dictionary mapping unique keys values.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dic_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that creates a dictionary from 2 data.frame columns — dic_from_df","text":"","code":"dic_from_df(df, keycol, valcol)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dic_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that creates a dictionary from 2 data.frame columns — dic_from_df","text":"df data.frame. Data.frame construct dictionary keycol character scalar. Name column containing dictionary keys. valcol character scalar. Name column containing dictionary values.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/dic_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that creates a dictionary from 2 data.frame columns — dic_from_df","text":"dictionary unique key-value pairs.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/download_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Data size calculator — download_size","title":"Data size calculator — download_size","text":"function calculates size required downloads user's query.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/download_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data size calculator — download_size","text":"","code":"download_size(dsname, append.bmf, urls = NULL)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/download_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data size calculator — download_size","text":"dsname character scalar. Name data series query S3. Valid inputs either \"core\" \"bmf\", . append.bmf boolean. Option merge queried core data bmf data. Involves downloading bmf dataset take longer. urls character vector. Vector urls s3 buckets download.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/download_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data size calculator — download_size","text":"response user indicating whether want proceed download","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to filter a data.table with user-provided arguments — filter_data","title":"Function to filter a data.table with user-provided arguments — filter_data","text":"function takes list filters filters either core bmf data.table objects.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to filter a data.table with user-provided arguments — filter_data","text":"","code":"filter_data(dt, filters)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to filter a data.table with user-provided arguments — filter_data","text":"dt data.table. Data.table filter filters list. List column filters apply","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to filter a data.table with user-provided arguments — filter_data","text":"filtered data.table","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/fips_map.html","id":null,"dir":"Reference","previous_headings":"","what":"function that maps fips codes to user arguments — fips_map","title":"function that maps fips codes to user arguments — fips_map","text":"function takes geographic arguments get_data() maps fips codes found core datasets. codes can used filter core datasets.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/fips_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function that maps fips codes to user arguments — fips_map","text":"","code":"fips_map(geo.county, geo.region)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/fips_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function that maps fips codes to user arguments — fips_map","text":"geo.county character vector. County names filtering e.g. \"cullman\", \"dale\". Case insensitive. geo.region character vector. Regions filtering e.g. \"South\", \"Midwest\" based census region classifications.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/fips_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function that maps fips codes to user arguments — fips_map","text":"character vector. county fips codes filtering core datasets.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/firstupper.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to process first letter of lowercase strings — firstupper","title":"Function to process first letter of lowercase strings — firstupper","text":"function capitalizes first character string.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/firstupper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to process first letter of lowercase strings — firstupper","text":"","code":"firstupper(string)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/firstupper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to process first letter of lowercase strings — firstupper","text":"string character scalar. String process capitalize first letter.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/firstupper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to process first letter of lowercase strings — firstupper","text":"string first letter capitalized","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/generate_ntee_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Script containing helper functions for ntee_main.R — generate_ntee_regex","title":"Script containing helper functions for ntee_main.R — generate_ntee_regex","text":"function creates regex query used filter NTEE2 codes based user inputs.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/generate_ntee_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Script containing helper functions for ntee_main.R — generate_ntee_regex","text":"","code":"generate_ntee_regex(ntee.group, ntee.code, ntee.orgtype)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/generate_ntee_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Script containing helper functions for ntee_main.R — generate_ntee_regex","text":"ntee.group character vector. Vector desired Industry Group codes filter. Use \"\" include possible codes. ntee.code character vector. Sequence desired Industry, Division Subdivision codes (old code structure) use filtering. Use \"\" include possible codes. Can also provide partial codes. example \"\" \"Axx\" query NTEE2 codes based Industry group \"\" division subdivisions. ntee.orgtype character vector. Vector Organization Types. Use \"\" include possible codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/generate_ntee_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Script containing helper functions for ntee_main.R — generate_ntee_regex","text":"regex query can used parse_ntee() function filter population NTEE2 codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/generate_ntee_regex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Script containing helper functions for ntee_main.R — generate_ntee_regex","text":"function returns regex query parse NTEE2 Codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/generate_ntee_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Script containing helper functions for ntee_main.R — generate_ntee_regex","text":"","code":"if (FALSE) { generate_ntee_regex(\"ART\", \"A23\", \"RG\") generate_ntee_regex(\"all\", \"Axx\", \"RG\") generate_ntee_regex(\"EDU\", \"B\", \"all\") }"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Preview CBSA/CSA FIPS Codes — geo_preview","title":"Preview CBSA/CSA FIPS Codes — geo_preview","text":"geo_preview() previews cbsa metadata use filtering core data sets. also saves outputs invisible return.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preview CBSA/CSA FIPS Codes — geo_preview","text":"","code":"geo_preview(geo, within = NULL, type = NULL)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preview CBSA/CSA FIPS Codes — geo_preview","text":"geo Character vector. Vector columns preview/return CBSA data within character vector. Vector state abbreviations filter data . type character scalar. Scalar variable indicating type data return. Acceptable values \"metro\" \"micro\".","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preview CBSA/CSA FIPS Codes — geo_preview","text":"printout data data.frame filtered cbsa data.frame","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preview CBSA/CSA FIPS Codes — geo_preview","text":"","code":"geo_preview( geo=\"cbsa\", within=\"LA\" ) #>  #>  #> |                             cbsa| #> |--------------------------------:| #> |                    Lafayette, LA| #> |                  Baton Rouge, LA| #> |                     DeRidder, LA| #> |      Shreveport-Bossier City, LA| #> |                 Lake Charles, LA| #> |                   Natchez, MS-LA| #> |                   Alexandria, LA| #> |                   New Iberia, LA| #> |         New Orleans-Metairie, LA| #> |   Houma-Bayou Cane-Thibodaux, LA| #> |                       Ruston, LA| #> |                       Monroe, LA| #> |                 Natchitoches, LA| #> |                    Opelousas, LA| #> |                  Morgan City, LA| #> | Slidell-Mandeville-Covington, LA| #> |                      Hammond, LA| #> |                     Bogalusa, LA| #> |                       Minden, LA| geo_preview( geo=c(\"county\",\"cbsa\"), within=\"GA\", type=\"metro\" ) #>  #>  #> |                            county|                              cbsa| #> |---------------------------------:|---------------------------------:| #> |       Barrow County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |       Bartow County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |          Bibb County, GA, Central|             Macon-Bibb County, GA| #> |     Brantley County, GA, Outlying|          Brunswick-St. Simons, GA| #> |       Brooks County, GA, Outlying|                      Valdosta, GA| #> |         Bryan County, GA, Central|                      Savannah, GA| #> |        Burke County, GA, Outlying|    Augusta-Richmond County, GA-SC| #> |        Butts County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |      Carroll County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |       Catoosa County, GA, Central|                Chattanooga, TN-GA| #> |       Chatham County, GA, Central|                      Savannah, GA| #> | Chattahoochee County, GA, Central|                   Columbus, GA-AL| #> |      Cherokee County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |        Clarke County, GA, Central|          Athens-Clarke County, GA| #> |       Clayton County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |          Cobb County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |      Columbia County, GA, Central|    Augusta-Richmond County, GA-SC| #> |        Coweta County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |     Crawford County, GA, Outlying|             Macon-Bibb County, GA| #> |         Dade County, GA, Outlying|                Chattanooga, TN-GA| #> |        Dawson County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |        DeKalb County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |     Dougherty County, GA, Central|                        Albany, GA| #> |       Douglas County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |       Echols County, GA, Outlying|                      Valdosta, GA| #> |    Effingham County, GA, Outlying|                      Savannah, GA| #> |       Fayette County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |         Floyd County, GA, Central|                          Rome, GA| #> |       Forsyth County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |        Fulton County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |         Glynn County, GA, Central|          Brunswick-St. Simons, GA| #> |      Gwinnett County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |          Hall County, GA, Central|                   Gainesville, GA| #> |     Haralson County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |       Harris County, GA, Outlying|                   Columbus, GA-AL| #> |        Heard County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |         Henry County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |       Houston County, GA, Central|                 Warner Robins, GA| #> |       Jasper County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |        Jones County, GA, Outlying|             Macon-Bibb County, GA| #> |       Lanier County, GA, Outlying|                      Valdosta, GA| #> |           Lee County, GA, Central|                        Albany, GA| #> |       Liberty County, GA, Central|                    Hinesville, GA| #> |      Lincoln County, GA, Outlying|    Augusta-Richmond County, GA-SC| #> |         Long County, GA, Outlying|                    Hinesville, GA| #> |       Lowndes County, GA, Central|                      Valdosta, GA| #> |      Lumpkin County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |     McDuffie County, GA, Outlying|    Augusta-Richmond County, GA-SC| #> |     McIntosh County, GA, Outlying|          Brunswick-St. Simons, GA| #> |      Madison County, GA, Outlying|          Athens-Clarke County, GA| #> |       Marion County, GA, Outlying|                   Columbus, GA-AL| #> |   Meriwether County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |       Monroe County, GA, Outlying|             Macon-Bibb County, GA| #> |       Morgan County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |       Murray County, GA, Outlying|                        Dalton, GA| #> |      Muscogee County, GA, Central|                   Columbus, GA-AL| #> |        Newton County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |        Oconee County, GA, Central|          Athens-Clarke County, GA| #> |   Oglethorpe County, GA, Outlying|          Athens-Clarke County, GA| #> |      Paulding County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |         Peach County, GA, Central|                 Warner Robins, GA| #> |      Pickens County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |         Pike County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |      Richmond County, GA, Central|    Augusta-Richmond County, GA-SC| #> |      Rockdale County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |     Spalding County, GA, Outlying| Atlanta-Sandy Springs-Roswell, GA| #> |      Stewart County, GA, Outlying|                   Columbus, GA-AL| #> |       Talbot County, GA, Outlying|                   Columbus, GA-AL| #> |      Terrell County, GA, Outlying|                        Albany, GA| #> |       Twiggs County, GA, Outlying|             Macon-Bibb County, GA| #> |        Walker County, GA, Central|                Chattanooga, TN-GA| #> |        Walton County, GA, Central| Atlanta-Sandy Springs-Roswell, GA| #> |     Whitfield County, GA, Central|                        Dalton, GA| #> |        Worth County, GA, Outlying|                        Albany, GA| geo_preview( geo=c(\"cbsa\",\"cbsafips\"), within=\"FL\", type=\"metro\" ) #>  #>  #> |                                        cbsa| cbsafips| #> |-------------------------------------------:|--------:| #> |                             Gainesville, FL|    23540| #> |                            Jacksonville, FL|    27260| #> |           Panama City-Panama City Beach, FL|    37460| #> |           Palm Bay-Melbourne-Titusville, FL|    37340| #> |   Miami-Fort Lauderdale-West Palm Beach, FL|    33100| #> |                             Punta Gorda, FL|    39460| #> |                       Homosassa Springs, FL|    26140| #> |                     Naples-Marco Island, FL|    34940| #> |              Pensacola-Ferry Pass-Brent, FL|    37860| #> |      Deltona-Daytona Beach-Ormond Beach, FL|    19660| #> |                             Tallahassee, FL|    45220| #> |         Tampa-St. Petersburg-Clearwater, FL|    45300| #> |                                 Sebring, FL|    42700| #> | Sebastian-Vero Beach-West Vero Corridor, FL|    42680| #> |               Orlando-Kissimmee-Sanford, FL|    36740| #> |                   Cape Coral-Fort Myers, FL|    15980| #> |           North Port-Bradenton-Sarasota, FL|    35840| #> |                                   Ocala, FL|    36100| #> |                          Port St. Lucie, FL|    38940| #> |      Crestview-Fort Walton Beach-Destin, FL|    18880| #> |                   Lakeland-Winter Haven, FL|    29460| #> |                   Wildwood-The Villages, FL|    48680| xx <- geo_preview( geo=c(\"cbsa\",\"cbsafips\"), within=\"FL\", type=\"metro\" ) #>  #>  #> |                                        cbsa| cbsafips| #> |-------------------------------------------:|--------:| #> |                             Gainesville, FL|    23540| #> |                            Jacksonville, FL|    27260| #> |           Panama City-Panama City Beach, FL|    37460| #> |           Palm Bay-Melbourne-Titusville, FL|    37340| #> |   Miami-Fort Lauderdale-West Palm Beach, FL|    33100| #> |                             Punta Gorda, FL|    39460| #> |                       Homosassa Springs, FL|    26140| #> |                     Naples-Marco Island, FL|    34940| #> |              Pensacola-Ferry Pass-Brent, FL|    37860| #> |      Deltona-Daytona Beach-Ormond Beach, FL|    19660| #> |                             Tallahassee, FL|    45220| #> |         Tampa-St. Petersburg-Clearwater, FL|    45300| #> |                                 Sebring, FL|    42700| #> | Sebastian-Vero Beach-West Vero Corridor, FL|    42680| #> |               Orlando-Kissimmee-Sanford, FL|    36740| #> |                   Cape Coral-Fort Myers, FL|    15980| #> |           North Port-Bradenton-Sarasota, FL|    35840| #> |                                   Ocala, FL|    36100| #> |                          Port St. Lucie, FL|    38940| #> |      Crestview-Fort Walton Beach-Destin, FL|    18880| #> |                   Lakeland-Winter Haven, FL|    29460| #> |                   Wildwood-The Villages, FL|    48680|"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_bmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to download master bmf file and filter it based on ntee\r\nand FIPS codes — get_bmf","title":"Function to download master bmf file and filter it based on ntee\r\nand FIPS codes — get_bmf","text":"function downloads .rds file public s3 bucket, reads memory, deletes file. converts data.frame data.table filters based user-specified FIPS codes ntee codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_bmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to download master bmf file and filter it based on ntee\r\nand FIPS codes — get_bmf","text":"","code":"get_bmf(url, dest_path = \"bmf.rds\", filters)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_bmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to download master bmf file and filter it based on ntee\r\nand FIPS codes — get_bmf","text":"url character scalar. Link object s3 bucket. dest_path character scalar. Path download bmf file . filters list. List column filters apply","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_bmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to download master bmf file and filter it based on ntee\r\nand FIPS codes — get_bmf","text":"data.table. Data.table filtered master bmf file.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to download, filter and merge NCCS Core data — get_core","title":"Function to download, filter and merge NCCS Core data — get_core","text":"function executes either s3_select query data download local merge specified subset core dataset. merges dataset ntee dataframe.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to download, filter and merge NCCS Core data — get_core","text":"","code":"get_core(dsname, time, scope.orgtype, scope.formtype, filters, append.bmf)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to download, filter and merge NCCS Core data — get_core","text":"dsname character scalar. Name data series query S3. Valid inputs \"core\" \"bmf\", . time character vector. Dates core/bmf files query. Valid inputs range 1989-2022. Default value \"current\" 2022. scope.orgtype character scalar. Organization type query core/bmf s3 bucket. Valid inputs 'CHARITIES' charities (501C3-PC), 'PRIVFOUND' private foundations (501C3-PF) 'NONPROFIT' nonprofits (501CE) scope.formtype character scalar. Form type query core/bmf s3 bucket. Valid inputs 'PC'(nonprofits file full version), 'EZ'(nonprofits file 990EZs ), ' PZ'(nonprofits file PC EZ), 'PF'(private foundations). filters list. List column filters apply append.bmf boolean. Option merge queried core data bmf data. Involves downloading bmf dataset take longer. Default == FALSE.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to download, filter and merge NCCS Core data — get_core","text":"fully merged core data.table end user","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download, filter and merge metadata for NCCS legacy core and bmf datasets. — get_data","title":"Download, filter and merge metadata for NCCS legacy core and bmf datasets. — get_data","text":"function downloads legacy NCCS data, filters based geography NTEE codes, merges NTEE metadata. BMF data can also appended Core data.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download, filter and merge metadata for NCCS legacy core and bmf datasets. — get_data","text":"","code":"get_data(   dsname = NULL,   time = \"2015\",   scope.orgtype = \"NONPROFIT\",   scope.formtype = \"PZ\",   geo.state = NULL,   geo.city = NULL,   geo.county = NULL,   geo.region = NULL,   ntee = NULL,   ntee.group = NULL,   ntee.code = NULL,   ntee.orgtype = NULL,   append.bmf = FALSE )"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download, filter and merge metadata for NCCS legacy core and bmf datasets. — get_data","text":"dsname character scalar. Name data series query S3. Valid inputs either \"core\" \"bmf\", . time character vector. Dates core/bmf files query. Valid inputs range 1989-2022. scope.orgtype character scalar. Organization type query core/bmf s3 bucket. Valid inputs 'CHARITIES' charities (501C3-PC), 'PRIVFOUND' private foundations (501C3-PF) 'NONPROFIT' nonprofits (501CE) scope.formtype character scalar. Form type query core/bmf s3 bucket. Valid inputs 'PC'(nonprofits file full version), 'EZ'(nonprofits file 990EZs ), ' PZ'(nonprofits file PC EZ), 'PF'(private foundations). geo.state character vector. Filter query state abbreviations e.g. \"NY\", \"CA\". Default == NULL includes states. geo.city character vector. City names filtering e.g. \"Chicago\", \"montgomery\". Case insensitive geo.county character vector. County names filtering e.g. \"cullman\", \"dale\". Case insensitive. geo.region character vector. Regions filtering e.g. \"South\", \"Midwest\" based census region classifications. ntee character vector. Vector user inputs. user inputs progressively filtered group, code orgtypes sorted separate vectors. ntee.group character vector. Specific Industry Group codes submitted user ntee.code character vector. Specific level 2-4 codes (Industry, Division, Subdivision) submitted user. ntee.orgtype character vector. Specific level 5 codes (Organization Type) submitted user. append.bmf boolean. Option merge queried core data bmf data. Involves downloading bmf dataset take longer. Default == FALSE.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download, filter and merge metadata for NCCS legacy core and bmf datasets. — get_data","text":"data.table queried data","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_ntee_level_3_4.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate level 3 and 4 of NTEE2 code — get_ntee_level_3_4","title":"Function to generate level 3 and 4 of NTEE2 code — get_ntee_level_3_4","text":"function takes digits23 digits45 old NTEE codes create levels 3 4 NTEE2 code","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_ntee_level_3_4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate level 3 and 4 of NTEE2 code — get_ntee_level_3_4","text":"","code":"get_ntee_level_3_4(digits23, digits45)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_ntee_level_3_4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate level 3 and 4 of NTEE2 code — get_ntee_level_3_4","text":"digits23 character. Digits 2nd 3rd place old code digits45 character. Digits 4th 5th place old code","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_ntee_level_3_4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to generate level 3 and 4 of NTEE2 code — get_ntee_level_3_4","text":"level 3 4 codes concatenated together string","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_ntee_level_3_4.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Function to generate level 3 and 4 of NTEE2 code — get_ntee_level_3_4","text":"See https://github.com/Nonprofit-Open-Data-Collective/mission-taxonomies/blob/main/NTEE-disaggregated/README.md details","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/get_ntee_level_3_4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to generate level 3 and 4 of NTEE2 code — get_ntee_level_3_4","text":"","code":"if (FALSE) { get_ntee_level_3_4(\"23\", \"45\") get_ntee_level_3_4(\"03\", \"22\") }"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/jsonify_f.html","id":null,"dir":"Reference","previous_headings":"","what":"Script with utility functions\r\nFunction that prettifies json — jsonify_f","title":"Script with utility functions\r\nFunction that prettifies json — jsonify_f","text":"Script utility functions Function prettifies json","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/jsonify_f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Script with utility functions\r\nFunction that prettifies json — jsonify_f","text":"","code":"jsonify_f(f)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/jsonify_f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Script with utility functions\r\nFunction that prettifies json — jsonify_f","text":"f json string. String containing json text","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/load_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to read legacy csv files from core/bmf\r\npublic s3 bucket url. Saves the file as a data.table. — load_dt","title":"Function to read legacy csv files from core/bmf\r\npublic s3 bucket url. Saves the file as a data.table. — load_dt","text":"function used lapply map list urls list data.tables.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/load_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to read legacy csv files from core/bmf\r\npublic s3 bucket url. Saves the file as a data.table. — load_dt","text":"","code":"load_dt(url)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/load_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to read legacy csv files from core/bmf\r\npublic s3 bucket url. Saves the file as a data.table. — load_dt","text":"url character scalar. Link public s3 object.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/load_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to read legacy csv files from core/bmf\r\npublic s3 bucket url. Saves the file as a data.table. — load_dt","text":"data.table","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/map_countyfips.html","id":null,"dir":"Reference","previous_headings":"","what":"function that maps county FIPS codes to user arguments — map_countyfips","title":"function that maps county FIPS codes to user arguments — map_countyfips","text":"function takes geographic arguments maps county FIPS codes found legacy datasets. codes can used filter legacy datasets.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/map_countyfips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function that maps county FIPS codes to user arguments — map_countyfips","text":"","code":"map_countyfips(geo.county, geo.region, geo.cbsafips, geo.csafips)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/map_countyfips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function that maps county FIPS codes to user arguments — map_countyfips","text":"geo.county character vector. County names filtering e.g. \"cullman\", \"dale\". Case insensitive. geo.region character vector. Regions filtering e.g. \"South\", \"Midwest\" based census region classifications. geo.cbsafips numeric vector. Census CBSA FIPS codes. geo.csafips numeric vector. Census CSA FIPS codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/map_countyfips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function that maps county FIPS codes to user arguments — map_countyfips","text":"character vector. county fips codes filtering core datasets.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/nteecc_map.html","id":null,"dir":"Reference","previous_headings":"","what":"This function maps ntee2 codes to ntee.cc codes — nteecc_map","title":"This function maps ntee2 codes to ntee.cc codes — nteecc_map","text":"function takes input ntee2 codes inferred user inputs get_data() maps ntee.cc codes merging found ntee_df","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/nteecc_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function maps ntee2 codes to ntee.cc codes — nteecc_map","text":"","code":"nteecc_map(ntee.user, ntee.group, ntee.code, ntee.orgtype)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/nteecc_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function maps ntee2 codes to ntee.cc codes — nteecc_map","text":"ntee.user character vector. Vector user inputs. user inputs progressively filtered group, code orgtypes sorted separate vectors. ntee.group character vector. Specific Industry Group codes submitted user ntee.code character vector. Specific level 2-4 codes (Industry, Division, Subdivision) submitted user. ntee.orgtype character vector. Specific level 5 codes (Organization Type) submittted user.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/nteecc_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function maps ntee2 codes to ntee.cc codes — nteecc_map","text":"character vector. ntee.cc codes merging core dataset.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create metadata from NTEE data set for ntee_preview() — ntee_metadata","title":"Create metadata from NTEE data set for ntee_preview() — ntee_metadata","text":"Metadata generating function ntee_preview(). Creates named lists ntee code level. Processes user inputs ntee_preview() easy look using named lists","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create metadata from NTEE data set for ntee_preview() — ntee_metadata","text":"","code":"ntee_metadata(ntee.user)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create metadata from NTEE data set for ntee_preview() — ntee_metadata","text":"ntee.user character vector. Vector unique NTEE2 codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create metadata from NTEE data set for ntee_preview() — ntee_metadata","text":"named list. Named list contains Level 1, Level 2-4, Level 5 processed user inputs","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide documentation for NTEE2 codes — ntee_preview","title":"Provide documentation for NTEE2 codes — ntee_preview","text":"Take user inputs across levels 1- 5 NTEE2 code structure returns text metadata describing NTEE Code level","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide documentation for NTEE2 codes — ntee_preview","text":"","code":"ntee_preview(ntee, ntee.group, ntee.code, ntee.orgtype)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide documentation for NTEE2 codes — ntee_preview","text":"ntee character vector. Vector user inputs. user inputs progressively filtered group, code orgtypes sorted separate vectors. ntee.group character vector. Vector desired Industry Group codes filter. Use \"\" include possible codes. ntee.code character vector. Sequence desired Industry, Division Subdivision codes (old code structure) use filtering. Use \"\" include possible codes. Can also provide partial codes. example \"\" \"Axx\" query NTEE2 codes based Industry group \"\" division subdivisions. ntee.orgtype character vector. Vector Organization Types. Use \"\" include possible codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide documentation for NTEE2 codes — ntee_preview","text":"text strings describe NTEE2 codes level","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/ntee_preview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide documentation for NTEE2 codes — ntee_preview","text":"","code":"ntee_preview(ntee = c(\"ART\", \"A2X\")) #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #> Collecting Matching Industry Groups #> Collecting Matching Industry Division and Subdivisions #> Collecting Matching Organization Types #>  #>  #>  ART: Arts, Culture & Humanities #>  #>      AA: Alliance/Advocacy Organizations #>  #>          A00:  #>  #>           #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>      MM: Monetary Support - Multiple Organizations #>  #>          A00:  #>  #>           #>  #>          A26:  #>  #>          Providing support to organizations that foster, nurture and sustain #>          artistic excellence and create a climate in which the arts and #>          humanities may flourish in a community. #>  #>          A30:  #>  #>          Providing support to organizations that are involved in publishing, #>          productions or programming utilizing any of a variety of media or in #>          educational programs related to the media. Use this code for #>          organizations involved in productions in different types of media or #>          for those using types of media not specified below. #>  #>          A32:  #>  #>          Providing support to organizations engaged in television productions #>          and broadcast. Includes producers of public television, cable #>          television, community access television, broadcasting in schools, and #>          interactive television. #>  #>          A60:  #>  #>          Providing support to organizations that provide access to the #>          performing arts or a variety of art forms including the performing #>          arts, and/or which present performing arts series. Use this code for #>          organizations devoted to art forms not specified below. #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>          A65:  #>  #>          Providing support to organizations whose primary activity is the #>          production of plays. (Organizations that present the productions of #>          others should be classified as presenters. (A61) #>  #>      MS: Monetary Support - Single Organization #>  #>          A00:  #>  #>           #>  #>          A20:  #>  #>          Providing support to organizations that promote, produce or provide #>          access to a variety of arts experiences encompassing the visual, media #>          or performing arts. #>  #>          A32:  #>  #>          Providing support to organizations engaged in television productions #>          and broadcast. Includes producers of public television, cable #>          television, community access television, broadcasting in schools, and #>          interactive television. #>  #>          A40:  #>  #>          Providing support to organizations whose activities promote or provide #>          access to a variety of visual arts. Included are organizations that #>          focus on an art form in a specific medium such as stained glass or #>          textiles. #>  #>          A50:  #>  #>          Providing support to organizations that acquire, preserve, research, #>          exhibit and provide for the educational use of works of art, objects or #>          artifacts that are related to the study of zoology, biology, botany, #>          mineralogy, geology and other natural sciences; history; archeology; or #>          science and technology. Use this code for types of museums not #>          specified below. #>  #>          A51:  #>  #>          Providing support to organizations that acquire, preserve and exhibit #>          collections of objects including fine art, decorative art, folk/ethnic #>          art and textiles that are collected primarily for their aesthetic #>          qualities and their importance as representatives of a particular #>          artistic tradition or style. #>  #>          A52:  #>  #>          Providing support to organizations that develop and maintain #>          educational exhibits that are structured for the size, interests and #>          intellectual capacity of young children. Childrens museums are #>          participatory and allow visitors to interact with the exhibits #>          (touching, exploring, manipulating), and many offer organized lessons #>          for groups of school children that focus on one or more of the #>          exhibits.  NOTE: See also A57, Science and Technology Museums, for #>          other organizations with substantial activities and collections for #>          children. #>  #>          A54:  #>  #>          Providing support to organizations that acquire, preserve, research and #>          exhibit collections of objects including documents, tools, implements #>          and furnishings that have significance in helping to interpret or #>          understand the past. History museums may specialize in a specific era #>          such as early Greece or Rome, a particular geographical region such as #>          California or Appalachia, a particular ethnic or cultural group such as #>          Native Americans or a specific subject area such as costumes; and may #>          contain items created or used by contemporary or historical figures. #>  #>          A60:  #>  #>          Providing support to organizations that provide access to the #>          performing arts or a variety of art forms including the performing #>          arts, and/or which present performing arts series. Use this code for #>          organizations devoted to art forms not specified below. #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>          A62:  #>  #>          Providing support to organizations that create and/or perform a variety #>          of types of dance, including modern, folk, country and western, and #>          square dancing. #>  #>          A65:  #>  #>          Providing support to organizations whose primary activity is the #>          production of plays. (Organizations that present the productions of #>          others should be classified as presenters. (A61) #>  #>          A69:  #>  #>          Providing support to organizations whose primary activity is the #>          operation of a symphony #>  #>          A70:  #>  #>          Providing support to organizations that promote the study, teaching, or #>          appreciation of the humanities (archaeology, art history, history, #>          modern and classical languages, philosophy and ethics, and theology and #>          comparative religion). #>  #>          A80:  #>  #>          Providing support to organizations that promote awareness of and #>          appreciation for history and historical artifacts.  Use this code for #>          organizations that are not specified below. #>  #>      MT: Management and Technical Assistance #>  #>          A00:  #>  #>           #>  #>          A26:  #>  #>          Providing support to organizations that foster, nurture and sustain #>          artistic excellence and create a climate in which the arts and #>          humanities may flourish in a community. #>  #>          A54:  #>  #>          Providing support to organizations that acquire, preserve, research and #>          exhibit collections of objects including documents, tools, implements #>          and furnishings that have significance in helping to interpret or #>          understand the past. History museums may specialize in a specific era #>          such as early Greece or Rome, a particular geographical region such as #>          California or Appalachia, a particular ethnic or cultural group such as #>          Native Americans or a specific subject area such as costumes; and may #>          contain items created or used by contemporary or historical figures. #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>          A82:  #>  #>          Providing support to organizations that interpret, collect and preserve #>          the historical heritage of a specific geographic location. #>  #>          A90:  #>  #>          Providing support to organizations that provide services such as #>          facilities or touring assistance for arts organizations. #>  #>      NS: Nonmonetary Support Not Elsewhere Classified (N.E.C.) #>  #>          A00:  #>  #>           #>  #>          A20:  #>  #>          Providing support to organizations that promote, produce or provide #>          access to a variety of arts experiences encompassing the visual, media #>          or performing arts. #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>          A69:  #>  #>          Providing support to organizations whose primary activity is the #>          operation of a symphony #>  #>      PA: Professional Societies/Associations #>  #>          A00:  #>  #>           #>  #>          A20:  #>  #>          Providing support to organizations that promote, produce or provide #>          access to a variety of arts experiences encompassing the visual, media #>          or performing arts. #>  #>          A25:  #>  #>          Providing support to organizations that provide informal arts #>          educational programming and/or instruction but do not grant diplomas or #>          degrees; or which offer services regarding the arts to educational #>          institutions or to public entities involved in education. #>  #>          A30:  #>  #>          Providing support to organizations that are involved in publishing, #>          productions or programming utilizing any of a variety of media or in #>          educational programs related to the media. Use this code for #>          organizations involved in productions in different types of media or #>          for those using types of media not specified below. #>  #>          A33:  #>  #>          Providing support to organizations that publish a variety of materials #>          on diverse topics. Includes university presses. #>  #>          A40:  #>  #>          Providing support to organizations whose activities promote or provide #>          access to a variety of visual arts. Included are organizations that #>          focus on an art form in a specific medium such as stained glass or #>          textiles. #>  #>          A50:  #>  #>          Providing support to organizations that acquire, preserve, research, #>          exhibit and provide for the educational use of works of art, objects or #>          artifacts that are related to the study of zoology, biology, botany, #>          mineralogy, geology and other natural sciences; history; archeology; or #>          science and technology. Use this code for types of museums not #>          specified below. #>  #>          A60:  #>  #>          Providing support to organizations that provide access to the #>          performing arts or a variety of art forms including the performing #>          arts, and/or which present performing arts series. Use this code for #>          organizations devoted to art forms not specified below. #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>          A65:  #>  #>          Providing support to organizations whose primary activity is the #>          production of plays. (Organizations that present the productions of #>          others should be classified as presenters. (A61) #>  #>          A68:  #>  #>          Providing support to organizations whose primary activity is the #>          production of musical events, including concert series and music #>          festivals. #>  #>          A69:  #>  #>          Providing support to organizations whose primary activity is the #>          operation of a symphony #>  #>          A70:  #>  #>          Providing support to organizations that promote the study, teaching, or #>          appreciation of the humanities (archaeology, art history, history, #>          modern and classical languages, philosophy and ethics, and theology and #>          comparative religion). #>  #>          A80:  #>  #>          Providing support to organizations that promote awareness of and #>          appreciation for history and historical artifacts.  Use this code for #>          organizations that are not specified below. #>  #>      RG: Organizations that promote, produce or provide access to a variety of #>          arts experiences encompassing the visual, media or performing arts. #>  #>          A00:  #>  #>           #>  #>          A20:  #>  #>          Providing support to organizations that promote, produce or provide #>          access to a variety of arts experiences encompassing the visual, media #>          or performing arts. #>  #>          A23:  #>  #>           #>  #>          A24:  #>  #>           #>  #>          A25:  #>  #>          Providing support to organizations that provide informal arts #>          educational programming and/or instruction but do not grant diplomas or #>          degrees; or which offer services regarding the arts to educational #>          institutions or to public entities involved in education. #>  #>          A26:  #>  #>          Providing support to organizations that foster, nurture and sustain #>          artistic excellence and create a climate in which the arts and #>          humanities may flourish in a community. #>  #>          A27:  #>  #>           #>  #>          A30:  #>  #>          Providing support to organizations that are involved in publishing, #>          productions or programming utilizing any of a variety of media or in #>          educational programs related to the media. Use this code for #>          organizations involved in productions in different types of media or #>          for those using types of media not specified below. #>  #>          A31:  #>  #>           #>  #>          A32:  #>  #>          Providing support to organizations engaged in television productions #>          and broadcast. Includes producers of public television, cable #>          television, community access television, broadcasting in schools, and #>          interactive television. #>  #>          A33:  #>  #>          Providing support to organizations that publish a variety of materials #>          on diverse topics. Includes university presses. #>  #>          A34:  #>  #>          Providing support to organizations engaged in radio productions and #>          broadcast, including public radio stations and radio stations that #>          offer programming that is designed for community residents who are #>          blind or visually impaired (radio reading services). #>  #>          A40:  #>  #>          Providing support to organizations whose activities promote or provide #>          access to a variety of visual arts. Included are organizations that #>          focus on an art form in a specific medium such as stained glass or #>          textiles. #>  #>          A50:  #>  #>          Providing support to organizations that acquire, preserve, research, #>          exhibit and provide for the educational use of works of art, objects or #>          artifacts that are related to the study of zoology, biology, botany, #>          mineralogy, geology and other natural sciences; history; archeology; or #>          science and technology. Use this code for types of museums not #>          specified below. #>  #>          A51:  #>  #>          Providing support to organizations that acquire, preserve and exhibit #>          collections of objects including fine art, decorative art, folk/ethnic #>          art and textiles that are collected primarily for their aesthetic #>          qualities and their importance as representatives of a particular #>          artistic tradition or style. #>  #>          A52:  #>  #>          Providing support to organizations that develop and maintain #>          educational exhibits that are structured for the size, interests and #>          intellectual capacity of young children. Childrens museums are #>          participatory and allow visitors to interact with the exhibits #>          (touching, exploring, manipulating), and many offer organized lessons #>          for groups of school children that focus on one or more of the #>          exhibits.  NOTE: See also A57, Science and Technology Museums, for #>          other organizations with substantial activities and collections for #>          children. #>  #>          A53:  #>  #>           #>  #>          A54:  #>  #>          Providing support to organizations that acquire, preserve, research and #>          exhibit collections of objects including documents, tools, implements #>          and furnishings that have significance in helping to interpret or #>          understand the past. History museums may specialize in a specific era #>          such as early Greece or Rome, a particular geographical region such as #>          California or Appalachia, a particular ethnic or cultural group such as #>          Native Americans or a specific subject area such as costumes; and may #>          contain items created or used by contemporary or historical figures. #>  #>          A56:  #>  #>           #>  #>          A57:  #>  #>           #>  #>          A60:  #>  #>          Providing support to organizations that provide access to the #>          performing arts or a variety of art forms including the performing #>          arts, and/or which present performing arts series. Use this code for #>          organizations devoted to art forms not specified below. #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>          A62:  #>  #>          Providing support to organizations that create and/or perform a variety #>          of types of dance, including modern, folk, country and western, and #>          square dancing. #>  #>          A63:  #>  #>           #>  #>          A65:  #>  #>          Providing support to organizations whose primary activity is the #>          production of plays. (Organizations that present the productions of #>          others should be classified as presenters. (A61) #>  #>          A68:  #>  #>          Providing support to organizations whose primary activity is the #>          production of musical events, including concert series and music #>          festivals. #>  #>          A69:  #>  #>          Providing support to organizations whose primary activity is the #>          operation of a symphony #>  #>          A6A:  #>  #>           #>  #>          A6B:  #>  #>           #>  #>          A6C:  #>  #>           #>  #>          A70:  #>  #>          Providing support to organizations that promote the study, teaching, or #>          appreciation of the humanities (archaeology, art history, history, #>          modern and classical languages, philosophy and ethics, and theology and #>          comparative religion). #>  #>          A80:  #>  #>          Providing support to organizations that promote awareness of and #>          appreciation for history and historical artifacts.  Use this code for #>          organizations that are not specified below. #>  #>          A82:  #>  #>          Providing support to organizations that interpret, collect and preserve #>          the historical heritage of a specific geographic location. #>  #>          A84:  #>  #>           #>  #>          A90:  #>  #>          Providing support to organizations that provide services such as #>          facilities or touring assistance for arts organizations. #>  #>          A99:  #>  #>           #>  #>      RP: Research Institutes and/or Public Policy Analysis #>  #>          A00:  #>  #>           #>  #>          A34:  #>  #>          Providing support to organizations engaged in radio productions and #>          broadcast, including public radio stations and radio stations that #>          offer programming that is designed for community residents who are #>          blind or visually impaired (radio reading services). #>  #>          A61:  #>  #>          Providing support to organizations that operate facilities including #>          theaters for the performing arts. #>  #>  End of Preview"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/objs_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if ALL objects named one vector exist in memory — objs_exist","title":"Check if ALL objects named one vector exist in memory — objs_exist","text":"function used check block tract data tables exist memory","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/objs_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if ALL objects named one vector exist in memory — objs_exist","text":"","code":"objs_exist(...)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/objs_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if ALL objects named one vector exist in memory — objs_exist","text":"... vector objects.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/objs_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if ALL objects named one vector exist in memory — objs_exist","text":"single boolean value indicating whether objects present memory","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/obj_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to validate constructed file names and return s3 keys — obj_validate","title":"Function to validate constructed file names and return s3 keys — obj_validate","text":"function takes constructed file names core_file_constructor() tests urls files exist. extracts s3 bucket keys validated urls downstream s3 queries returns validated urls local download.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/obj_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to validate constructed file names and return s3 keys — obj_validate","text":"","code":"obj_validate(dsname, filenames, bucket.str, base.url, return.key)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/obj_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to validate constructed file names and return s3 keys — obj_validate","text":"dsname character scalar. Name data series query S3. Valid inputs \"core\" \"bmf\", . filenames character vector. Vector file names returned core_file_constructor bucket.str character scalar. Url legacy core/bmf bucket string formatting base.url character scalar. Base url nccsdata s3 bucket. return.key boolean. Default == FALSE return url links s3 buckets. Default == TRUE returns bucket keys s3_select queries.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/obj_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to validate constructed file names and return s3 keys — obj_validate","text":"vector valid s3 bucket keys core data sets","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_fips.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that returns FIPS codes that match dynamic User arguments — parse_fips","title":"Function that returns FIPS codes that match dynamic User arguments — parse_fips","text":"Filters either Block Tract data.tables return list FIPS codes match conditions specified User","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_fips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that returns FIPS codes that match dynamic User arguments — parse_fips","text":"","code":"parse_fips(census.level, ...)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_fips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that returns FIPS codes that match dynamic User arguments — parse_fips","text":"census.level string. data.table parse; \"BLOCK\" | \"TRACT\" ... columns either tract block dataset filtering.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_fips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that returns FIPS codes that match dynamic User arguments — parse_fips","text":"list FIPS codes either Tract IDs Block IDs.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_fips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that returns FIPS codes that match dynamic User arguments — parse_fips","text":"","code":"if (FALSE) { parse_fips(census.level = \"TRACT\",            state.census.abbr = c(\"NY\", \"MD\")) }"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified Geo Parser for Census Crosswalks — parse_geo","title":"Simplified Geo Parser for Census Crosswalks — parse_geo","text":"function takes simplified user inputs, filters either tract block datasets based inputs returns relevant FIPS codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified Geo Parser for Census Crosswalks — parse_geo","text":"","code":"parse_geo(   census.level,   geo.region = NULL,   geo.state = NULL,   geo.county = NULL,   geo.city = NULL )"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplified Geo Parser for Census Crosswalks — parse_geo","text":"census.level character scalar. Name crosswalk, either 'tract' 'block'. geo.region character vector. Name geographic region. Acceptable values 'South', 'West', 'Northeast' 'Midwest'. Default == NULL. geo.state character vector. 2 letter state abbreviations. Values 'NY', 'CA', 'WY' accepted. Default == NULL. geo.county character vector. Name county. Case insensitive. Default == NULL. geo.city character vector. Name city. State entered geo.state. Case insensitive. Default == NULL.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplified Geo Parser for Census Crosswalks — parse_geo","text":"character vector either census tract block FIPS.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_geo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplified Geo Parser for Census Crosswalks — parse_geo","text":"arguments nested. Hence FIPs present filters returned.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified Geo Parser for Census Crosswalks — parse_geo","text":"","code":"if (FALSE) { parse_geo(census.level = \"tract\",           geo.region = \"West\",           geo.state = \"WA\",           geo.county = \"king\") }"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse NTEE2 Codes — parse_ntee","title":"Parse NTEE2 Codes — parse_ntee","text":"Take arguments Industry Group, Industry, Division, Subdivision Organization Types filters population NTEE2 codes return matching codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse NTEE2 Codes — parse_ntee","text":"","code":"parse_ntee(ntee.group, ntee.code, ntee.orgtype)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse NTEE2 Codes — parse_ntee","text":"ntee.group character vector. Vector desired Industry Group codes filter. Use \"\" include possible codes. ntee.code character vector. Sequence desired Industry, Division Subdivision codes (old code structure) use filtering. Use \"\" include possible codes. Can also provide partial codes. example \"\" \"Axx\" query NTEE2 codes based Industry group \"\" division subdivisions. ntee.orgtype character vector. Vector Organization Types. Use \"\" include possible codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse NTEE2 Codes — parse_ntee","text":"list matched NTEE2 codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to loop through and execute a vector of regex queries\r\non a vector of ntee codes — parse_ntee_regex","title":"Function to loop through and execute a vector of regex queries\r\non a vector of ntee codes — parse_ntee_regex","text":"function executes vector regex queries vector containing population NTEE2 codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to loop through and execute a vector of regex queries\r\non a vector of ntee codes — parse_ntee_regex","text":"","code":"parse_ntee_regex(regexp_vec, ntee_codes)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to loop through and execute a vector of regex queries\r\non a vector of ntee codes — parse_ntee_regex","text":"regexp_vec character vector. Vector containing regex queries ntee_codes character vector. Vector containing population NTEE2 codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/parse_ntee_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to loop through and execute a vector of regex queries\r\non a vector of ntee codes — parse_ntee_regex","text":"vector matched NTEE2 codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/preview_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to summarize NCCS data. — preview_sample","title":"Function to summarize NCCS data. — preview_sample","text":"function computes summary statistics data pulled get_data()","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/preview_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to summarize NCCS data. — preview_sample","text":"","code":"preview_sample(   data,   group_by,   var,   stats,   ntee = NULL,   ntee.group = NULL,   ntee.code = NULL,   ntee.orgtype = NULL,   geo.state = NULL,   geo.city = NULL,   geo.region = NULL,   geo.county = NULL )"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/preview_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to summarize NCCS data. — preview_sample","text":"data data.frame data.table. -memory dataset summarize group_by character vector. Vector columns dplyr::group_by() var character scalar. Column calculate summary statistics stats character vector. Vector summary statistics compute dplyr::summarise(). Available options count, min, max, median mean ntee character vector. Vector user inputs. user inputs progressively filtered group, code orgtypes sorted separate vectors. ntee.group character vector. Specific Industry Group codes submitted user ntee.code character vector. Specific level 2-4 codes (Industry, Division, Subdivision) submitted user. ntee.orgtype character vector. Specific level 5 codes (Organization Type) submitted user. geo.state character vector. Filter query state abbreviations e.g. \"NY\", \"CA\". Default == NULL includes states. geo.city character vector. City names filtering e.g. \"Chicago\", \"montgomery\". Case insensitive geo.region character vector. Regions filtering e.g. \"South\", \"Midwest\" based census region classifications. geo.county character vector. County names filtering e.g. \"cullman\", \"dale\". Case insensitive.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/preview_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to summarize NCCS data. — preview_sample","text":"dataframe summary statistics computed group","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/preview_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to summarize NCCS data. — preview_sample","text":"","code":"if (FALSE) { core <- get_data(dsname = \"core\",                  time = \"2005\") preview_sample(data = core,                group_by = c(\"NTEECC\", \"STATE\"),                var = c(\"TOTREV\"),                stats = c(\"count\", \"mean\", \"max\")) }"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/query_ntee.html","id":null,"dir":"Reference","previous_headings":"","what":"function to match user queries to ntee2 codes — query_ntee","title":"function to match user queries to ntee2 codes — query_ntee","text":"function runs seperate ntee queries user inputs combines results","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/query_ntee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to match user queries to ntee2 codes — query_ntee","text":"","code":"query_ntee(ntee.user, ntee.group, ntee.code, ntee.orgtype)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/query_ntee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to match user queries to ntee2 codes — query_ntee","text":"ntee.user character vector. Vector user inputs. user inputs progressively filtered group, code orgtypes sorted separate vectors. ntee.group character vector. Specific Industry Group codes submitted user ntee.code character vector. Specific level 2-4 codes (Industry, Division, Subdivision) submitted user. ntee.orgtype character vector. Specific level 5 codes (Organization Type) submittted user.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/query_ntee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to match user queries to ntee2 codes — query_ntee","text":"vector matched unique ntee2 codes","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/sort_ntee.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to sort user ntee inputs into group, code and organization\r\ntyoe — sort_ntee","title":"Function to sort user ntee inputs into group, code and organization\r\ntyoe — sort_ntee","text":"function takes input ntee= argument get_data() sorts user inputs group, code organization type. combines user inputs pre-existing group, code organization types.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/sort_ntee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to sort user ntee inputs into group, code and organization\r\ntyoe — sort_ntee","text":"","code":"sort_ntee(ntee.user, ntee.group, ntee.code, ntee.orgtype)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/sort_ntee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to sort user ntee inputs into group, code and organization\r\ntyoe — sort_ntee","text":"ntee.user character vector. Vector user inputs. user inputs progressively filtered group, code orgtypes sorted separate vectors. ntee.group character vector. Specific Industry Group codes submitted user ntee.code character vector. Specific level 2-4 codes (Industry, Division, Subdivision) submitted user. ntee.orgtype character vector. Specific level 5 codes (Organization Type) submittted user.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/sort_ntee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to sort user ntee inputs into group, code and organization\r\ntyoe — sort_ntee","text":"list ntee groups, codes organization types queried user","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/sort_ntee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to sort user ntee inputs into group, code and organization\r\ntyoe — sort_ntee","text":"","code":"if (FALSE) {     sort_ntee(ntee.user = c(\"HEA\", \"B\", \"A2x\", \"C45\", \"RG\", \"AA\"),               ntee.group = c(\"ART\", \"EDU\"))     sort_ntee(ntee.user = c(\"HEA\", \"B\", \"A2x\", \"C45\", \"RG\"),               ntee.code = c(\"A2x\", \"Bxx\"))     sort_ntee(ntee.user = c(\"HEA\", \"B\", \"A2x\", \"C45\"),               ntee.orgtype = c(\"AA\", \"RG\")) }"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/tinybmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Development dataset for testing. — tinybmf","title":"Development dataset for testing. — tinybmf","text":"Sample 25,000 rows BMF NTEE GEO IDs.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/tinybmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Development dataset for testing. — tinybmf","text":"","code":"tinybmf"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/tinybmf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Development dataset for testing. — tinybmf","text":"data frame 25000 rows 38 variables: EIN integer COLUMN_DESCRIPTION NAME character COLUMN_DESCRIPTION SEC_NAME character COLUMN_DESCRIPTION RULEDATE integer COLUMN_DESCRIPTION SUBSECCD integer COLUMN_DESCRIPTION FNDNCD integer COLUMN_DESCRIPTION FRCD integer COLUMN_DESCRIPTION NTEECC character COLUMN_DESCRIPTION NTEEFINAL character COLUMN_DESCRIPTION NTEE2 character COLUMN_DESCRIPTION NAICS integer COLUMN_DESCRIPTION LEVEL1 character COLUMN_DESCRIPTION LEVEL2 character COLUMN_DESCRIPTION LEVEL3 character COLUMN_DESCRIPTION LEVEL4 character COLUMN_DESCRIPTION FILER character COLUMN_DESCRIPTION ZFILER character COLUMN_DESCRIPTION OUTREAS logical COLUMN_DESCRIPTION OUTNCCS character COLUMN_DESCRIPTION TAXPER integer COLUMN_DESCRIPTION ACCPER integer COLUMN_DESCRIPTION INCOME double COLUMN_DESCRIPTION ASSETS double COLUMN_DESCRIPTION CTAXPER integer COLUMN_DESCRIPTION CFINSRC character COLUMN_DESCRIPTION CTOTREV double COLUMN_DESCRIPTION CASSETS double COLUMN_DESCRIPTION ADDRESS character COLUMN_DESCRIPTION CITY character COLUMN_DESCRIPTION STATE character COLUMN_DESCRIPTION ZIP5 integer COLUMN_DESCRIPTION Match_addr character COLUMN_DESCRIPTION Longitude double COLUMN_DESCRIPTION Latitude double COLUMN_DESCRIPTION Addr_type character COLUMN_DESCRIPTION Score double COLUMN_DESCRIPTION BLOCK.GEOID.10 character COLUMN_DESCRIPTION TRACT.GEOID.10 character COLUMN_DESCRIPTION","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/tinybmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Development dataset for testing. — tinybmf","text":"DETAILS","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to validate inputs to get_data() — validate_get_data","title":"Function to validate inputs to get_data() — validate_get_data","text":"function validates argument passed get_data() returns informative error messages user inputs incorrect.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to validate inputs to get_data() — validate_get_data","text":"","code":"validate_get_data(   dsname,   time,   scope.orgtype,   scope.formtype,   geo.state,   geo.region )"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to validate inputs to get_data() — validate_get_data","text":"dsname character scalar. Name data series query S3. Valid inputs \"core\" \"bmf\", . time character vector. Dates core/bmf files query. Valid inputs range 1989-2022. Default value \"current\" 2022. scope.orgtype character scalar. Organization type query core/bmf s3 bucket. Valid inputs 'CHARITIES' charities (501C3-PC), 'PRIVFOUND' private foundations (501C3-PF) 'NONPROFIT' nonprofits (501CE) scope.formtype character scalar. Form type query core/bmf s3 bucket. Valid inputs 'PC'(nonprofits file full version), 'EZ'(nonprofits file 990EZs ), ' PZ'(nonprofits file PC EZ), 'PF'(private foundations). geo.state character vector. Filter query state abbreviations e.g. \"NY\", \"CA\". Default == NULL includes states. geo.region character vector. Regions filtering e.g. \"South\", \"Midwest\" based census region classifications.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to validate inputs to get_data() — validate_get_data","text":"message describing data queried.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_inp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to inspect user inputs and flag errors — validate_inp","title":"Function to inspect user inputs and flag errors — validate_inp","text":"function validates user inputs Industry Group, Industry, Division, Subdivision Organization Type, comparing set codes population. throws informative error messages.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_inp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to inspect user inputs and flag errors — validate_inp","text":"","code":"validate_inp(ntee.group, ntee.code, ntee.orgtype, ind_group_codes,                     level_2_4_codes, org_type_codes)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_inp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to inspect user inputs and flag errors — validate_inp","text":"ntee.group character. 3-character alphabetical Industry Group code. ntee.code character. 3-character alphanumeric containing Industry, Division Subdivision ntee.orgtype character. 2-character alphabetical Organization Type code. ind_group_codes character vector acceptable Industry Group codes. level_2_4_codes character vector acceptable Industry, Division Subdivision codes. org_type_codes character vector acceptable Organization Type codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_inp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to inspect user inputs and flag errors — validate_inp","text":"String indicating whether input valid invalid. invalid, points user list acceptable codes.","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to validate inputs to preview_sample() — validate_preview","title":"Function to validate inputs to preview_sample() — validate_preview","text":"function stops execution preview_sample() invalid query columns entered","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to validate inputs to preview_sample() — validate_preview","text":"","code":"validate_preview(df_cols, group_by, var, stats)"},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to validate inputs to preview_sample() — validate_preview","text":"df_cols character vector. Vector columns 'data' arg preview_sample(). Used ensure query columns present data group_by character vector. Vector columns dplyr::group_by() var character scalar. Column calculate summary statistics stats character vector. Vector summary statistics compute dplyr::summarise(). Available options count, min, max, median mean","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/reference/validate_preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to validate inputs to preview_sample() — validate_preview","text":"Informative error messages user edit function arguments","code":""},{"path":"https://urbaninstitute.github.io/nccsdata/testing.html","id":"test-data-frame","dir":"","previous_headings":"","what":"Test data frame","title":"NA","text":"","code":"set.seed( 1234 )  get_test_core <- function() {   df <- load(CORE-2010)   return(df) }  testcore <- dplyr::sample_n( get_test_df(), 25000 ) # save as object #  save to \"data\" folder: \"../data/testcore.rda\"   get_test_bmf <- function() {   df <- load(BMF)   return(df) }   testbmf <- dplyr::sample( get_test_bmf(), 25000 )"},{"path":"https://urbaninstitute.github.io/nccsdata/testing.html","id":"unit-tests","dir":"","previous_headings":"","what":"Unit Tests","title":"NA","text":"ntee arguments? geo arguments? predictable user errors non-nested geographies, null set","code":""}]
